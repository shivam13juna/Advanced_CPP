1
00:00:02,630 --> 00:00:07,290
hello everyone today<font color="#CCCCCC"> we will talk about</font>

2
00:00:05,160 --> 00:00:10,110
<font color="#CCCCCC">another algorithm</font><font color="#E5E5E5"> to find</font><font color="#CCCCCC"> the minimum</font>

3
00:00:07,290 --> 00:00:14,429
<font color="#CCCCCC">spanning tree it's called Premal prism</font>

4
00:00:10,110 --> 00:00:17,160
and again<font color="#CCCCCC"> we</font><font color="#E5E5E5"> use a to store all the</font>

5
00:00:14,429 --> 00:00:20,220
edges of the minimum<font color="#CCCCCC"> spanning tree</font><font color="#E5E5E5"> so</font>

6
00:00:17,160 --> 00:00:24,540
initially<font color="#E5E5E5"> a is empty</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> eventually will</font>

7
00:00:20,220 --> 00:00:28,080
<font color="#CCCCCC">return</font><font color="#E5E5E5"> a and then for each vertex in the</font>

8
00:00:24,540 --> 00:00:33,470
graph<font color="#CCCCCC"> we give it</font><font color="#E5E5E5"> two attributes</font><font color="#CCCCCC"> a key</font>

9
00:00:28,080 --> 00:00:36,810
and<font color="#E5E5E5"> a parent each key is initialized to</font>

10
00:00:33,470 --> 00:00:40,410
<font color="#E5E5E5">infinity and each parent is initialized</font>

11
00:00:36,810 --> 00:00:44,550
<font color="#E5E5E5">to a now so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the initial</font>

12
00:00:40,410 --> 00:00:48,179
<font color="#CCCCCC">condition for</font><font color="#E5E5E5"> all the vertices and then</font>

13
00:00:44,550 --> 00:00:52,890
we<font color="#E5E5E5"> randomly choose a</font><font color="#CCCCCC"> looot</font><font color="#E5E5E5"> and set the</font>

14
00:00:48,180 --> 00:00:57,500
key of that loot to be<font color="#E5E5E5"> 0 so</font><font color="#CCCCCC"> we pick a as</font>

15
00:00:52,890 --> 00:01:00,450
the loot<font color="#E5E5E5"> and the set a ski value to be 0</font>

16
00:00:57,500 --> 00:01:04,319
<font color="#CCCCCC">then we create a queue which contains</font>

17
00:01:00,450 --> 00:01:08,609
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the vertices in the graph next we</font>

18
00:01:04,319 --> 00:01:13,048
enter the<font color="#CCCCCC"> while loop</font><font color="#E5E5E5"> we find the vertex</font>

19
00:01:08,609 --> 00:01:15,809
<font color="#E5E5E5">in queue with the smallest key in this</font>

20
00:01:13,049 --> 00:01:20,369
<font color="#E5E5E5">case the vertex in cure with smallest</font>

21
00:01:15,810 --> 00:01:25,200
key is a because a<font color="#CCCCCC"> is key is 0 then a</font>

22
00:01:20,369 --> 00:01:29,060
way we move a from<font color="#CCCCCC"> Q since the parent</font><font color="#E5E5E5"> of</font>

23
00:01:25,200 --> 00:01:31,979
a is now so we'll skip this statement

24
00:01:29,060 --> 00:01:36,420
then we'll update the attributes for<font color="#E5E5E5"> all</font>

25
00:01:31,979 --> 00:01:39,359
the vertices<font color="#E5E5E5"> who is adjacent to a let's</font>

26
00:01:36,420 --> 00:01:43,409
start with F if the weight of the edge

27
00:01:39,359 --> 00:01:47,429
is less than the key of F<font color="#E5E5E5"> we'll update</font>

28
00:01:43,409 --> 00:01:49,700
<font color="#CCCCCC">f ski to be this weight and F parent to</font>

29
00:01:47,429 --> 00:01:49,700
be a

30
00:01:50,460 --> 00:01:57,669
same thing<font color="#E5E5E5"> for B since the weight of the</font>

31
00:01:54,399 --> 00:02:00,640
edge is less than the key of B<font color="#E5E5E5"> we'll</font>

32
00:01:57,670 --> 00:02:06,159
update<font color="#E5E5E5"> these key to be the weight and</font>

33
00:02:00,640 --> 00:02:10,330
the B's parent to be a now enter the

34
00:02:06,159 --> 00:02:12,819
second<font color="#E5E5E5"> loop</font><font color="#CCCCCC"> a has been removed from Q so</font>

35
00:02:10,330 --> 00:02:17,769
now<font color="#E5E5E5"> Q contains all the</font><font color="#CCCCCC"> vertices in</font>

36
00:02:12,819 --> 00:02:25,119
purple the vertex in Q with the smallest

37
00:02:17,769 --> 00:02:28,660
key is<font color="#E5E5E5"> F since f ski is</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> and the parent</font>

38
00:02:25,120 --> 00:02:31,390
of<font color="#E5E5E5"> F is not now so we need to execute</font>

39
00:02:28,660 --> 00:02:35,620
this statement<font color="#CCCCCC"> we'll push the edge</font>

40
00:02:31,390 --> 00:02:40,750
between F and<font color="#CCCCCC"> F parent in this case this</font>

41
00:02:35,620 --> 00:02:44,560
edge<font color="#E5E5E5"> into a so this</font><font color="#CCCCCC"> is one</font><font color="#E5E5E5"> of the edge</font>

42
00:02:40,750 --> 00:02:47,650
in minimum spanning tree and then we

43
00:02:44,560 --> 00:02:52,510
update all<font color="#E5E5E5"> the vertices that's adjacent</font>

44
00:02:47,650 --> 00:02:55,260
to<font color="#E5E5E5"> F as well as their key is less than</font>

45
00:02:52,510 --> 00:03:00,638
the weight<font color="#CCCCCC"> of the edge</font><font color="#E5E5E5"> we'll update</font>

46
00:02:55,260 --> 00:03:05,230
these vertices so in this case all<font color="#E5E5E5"> three</font>

47
00:03:00,639 --> 00:03:09,340
will be<font color="#E5E5E5"> updated and now a contains the</font>

48
00:03:05,230 --> 00:03:14,069
edge of AF and both a<font color="#E5E5E5"> and F has been</font>

49
00:03:09,340 --> 00:03:18,450
removed from<font color="#E5E5E5"> Q now enter the third loop</font>

50
00:03:14,069 --> 00:03:24,488
<font color="#E5E5E5">the vertex in Q with the smallest key is</font>

51
00:03:18,450 --> 00:03:27,668
C so we'll remove C from<font color="#E5E5E5"> Q and added the</font>

52
00:03:24,489 --> 00:03:31,540
edge of<font color="#CCCCCC"> C F</font><font color="#E5E5E5"> into the minimum spanning</font>

53
00:03:27,669 --> 00:03:35,799
tree and then update the<font color="#E5E5E5"> attributes of</font>

54
00:03:31,540 --> 00:03:39,880
<font color="#CCCCCC">C's neighbors since this weight is less</font>

55
00:03:35,799 --> 00:03:43,150
than these key<font color="#E5E5E5"> D will be updated but</font>

56
00:03:39,880 --> 00:03:46,180
this edge is bigger than<font color="#CCCCCC"> B's key so B</font>

57
00:03:43,150 --> 00:03:51,280
will<font color="#CCCCCC"> not be updated so we only need to</font>

58
00:03:46,180 --> 00:03:56,500
update<font color="#E5E5E5"> D now a contains a F and C F and</font>

59
00:03:51,280 --> 00:03:59,560
<font color="#E5E5E5">a CF are all removed from Q the</font><font color="#CCCCCC"> fourth</font>

60
00:03:56,500 --> 00:04:04,470
loop the vertex in cure with smallest

61
00:03:59,560 --> 00:04:08,680
key is either B or D let's choose B and

62
00:04:04,470 --> 00:04:12,940
<font color="#CCCCCC">will you remove</font><font color="#E5E5E5"> B from Q and add B</font><font color="#CCCCCC"> F</font>

63
00:04:08,680 --> 00:04:16,570
into a since P doesn't<font color="#CCCCCC"> have a neighbor</font>

64
00:04:12,940 --> 00:04:21,339
that<font color="#E5E5E5"> belongs to Q so there's no neighbor</font>

65
00:04:16,570 --> 00:04:26,740
need to be<font color="#E5E5E5"> updated and the next one with</font>

66
00:04:21,339 --> 00:04:32,859
<font color="#CCCCCC">the smallest key is</font><font color="#E5E5E5"> D so a add a CD into</font>

67
00:04:26,740 --> 00:04:35,740
<font color="#CCCCCC">a and last one is e we add te into a so</font>

68
00:04:32,860 --> 00:04:40,720
eventually<font color="#E5E5E5"> queue is empty</font><font color="#CCCCCC"> and we'll exit</font>

69
00:04:35,740 --> 00:04:44,889
the loop and a contains all the edges of

70
00:04:40,720 --> 00:04:47,680
the<font color="#E5E5E5"> minimum spanning tree now let's look</font>

71
00:04:44,889 --> 00:04:49,930
<font color="#E5E5E5">at the code in the main function</font><font color="#CCCCCC"> I</font>

72
00:04:47,680 --> 00:04:53,830
create a graph that<font color="#E5E5E5"> contains the</font>

73
00:04:49,930 --> 00:04:57,729
vertices of<font color="#CCCCCC"> ABCDEF</font><font color="#E5E5E5"> and a bunch of edge</font>

74
00:04:53,830 --> 00:05:02,130
that<font color="#E5E5E5"> connects the vertices essentially</font>

75
00:04:57,729 --> 00:05:02,130
I'm creating a graph like<font color="#CCCCCC"> this</font>

76
00:05:02,470 --> 00:05:10,630
and then I call<font color="#E5E5E5"> the function prim which</font>

77
00:05:05,080 --> 00:05:13,419
implements<font color="#CCCCCC"> the Primera ISM</font><font color="#E5E5E5"> the graph is</font>

78
00:05:10,630 --> 00:05:17,290
represented<font color="#E5E5E5"> with a vector of vertices</font>

79
00:05:13,420 --> 00:05:20,650
<font color="#E5E5E5">and a vector of edge I've also added</font>

80
00:05:17,290 --> 00:05:23,920
<font color="#E5E5E5">another function adjacent which will</font>

81
00:05:20,650 --> 00:05:28,210
find all the adjacent<font color="#CCCCCC"> vertices</font><font color="#E5E5E5"> of this</font>

82
00:05:23,920 --> 00:05:30,760
vertex<font color="#E5E5E5"> and both the adjacent vertex and</font>

83
00:05:28,210 --> 00:05:38,320
the edge that's connecting to it are

84
00:05:30,760 --> 00:05:41,110
returned this is the prim function that

85
00:05:38,320 --> 00:05:44,469
implements<font color="#E5E5E5"> the plume algorithm we have</font>

86
00:05:41,110 --> 00:05:47,280
three hash tables<font color="#CCCCCC"> a will contain</font><font color="#E5E5E5"> all the</font>

87
00:05:44,470 --> 00:05:50,080
edges of the minimum<font color="#E5E5E5"> spanning tree</font>

88
00:05:47,280 --> 00:05:53,309
parent and the key are used for

89
00:05:50,080 --> 00:05:56,380
computation<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> parents are</font>

90
00:05:53,310 --> 00:06:00,460
initialized to<font color="#E5E5E5"> now all the keys I</font>

91
00:05:56,380 --> 00:06:04,590
<font color="#E5E5E5">initialize to infinite then we choose a</font>

92
00:06:00,460 --> 00:06:08,560
as our<font color="#E5E5E5"> root and set its key to be 0 and</font>

93
00:06:04,590 --> 00:06:15,849
create a<font color="#E5E5E5"> queue which is a copy of all</font>

94
00:06:08,560 --> 00:06:19,210
<font color="#E5E5E5">the</font><font color="#CCCCCC"> vertices then we start looping</font><font color="#E5E5E5"> we</font>

95
00:06:15,850 --> 00:06:25,810
find that<font color="#CCCCCC"> U which is the</font><font color="#E5E5E5"> vertex in</font><font color="#CCCCCC"> queue</font>

96
00:06:19,210 --> 00:06:30,099
with the smallest key here I use the<font color="#CCCCCC"> STL</font>

97
00:06:25,810 --> 00:06:34,300
algorithm of<font color="#CCCCCC"> ming element and a lambda</font>

98
00:06:30,100 --> 00:06:38,800
<font color="#CCCCCC">function to do</font><font color="#E5E5E5"> the job and then i'll</font>

99
00:06:34,300 --> 00:06:41,560
<font color="#CCCCCC">remove you from queue here I use</font><font color="#E5E5E5"> arrays</font>

100
00:06:38,800 --> 00:06:43,000
following<font color="#CCCCCC"> remove idiom if you are not</font>

101
00:06:41,560 --> 00:06:46,890
familiar<font color="#E5E5E5"> with all these you are</font>

102
00:06:43,000 --> 00:06:50,800
recommended to<font color="#CCCCCC"> watch my STR playlist</font><font color="#E5E5E5"> if</font>

103
00:06:46,890 --> 00:06:53,500
the parent of you is not now<font color="#E5E5E5"> we'll save</font>

104
00:06:50,800 --> 00:06:56,350
<font color="#E5E5E5">the edge between you and the parent of</font>

105
00:06:53,500 --> 00:07:00,220
you as one<font color="#E5E5E5"> edge of the minimum</font><font color="#CCCCCC"> spanning</font>

106
00:06:56,350 --> 00:07:03,009
tree then<font color="#CCCCCC"> we find all the vertices</font><font color="#E5E5E5"> that</font>

107
00:07:00,220 --> 00:07:05,710
<font color="#E5E5E5">is adjacent to you</font>

108
00:07:03,009 --> 00:07:08,589
and if the weight of the edge is less

109
00:07:05,710 --> 00:07:11,080
than the key of the vertex<font color="#E5E5E5"> then we'll</font>

110
00:07:08,589 --> 00:07:16,839
update the parent of the vertex<font color="#CCCCCC"> as well</font>

111
00:07:11,080 --> 00:07:19,899
as the key of the<font color="#E5E5E5"> vertex so by end of</font>

112
00:07:16,839 --> 00:07:23,039
this<font color="#E5E5E5"> while loop a will contain all the</font>

113
00:07:19,899 --> 00:07:26,319
edges of the<font color="#E5E5E5"> minimum spanning tree and</font>

114
00:07:23,039 --> 00:07:31,568
at the end<font color="#E5E5E5"> I'll print out every edge</font>

115
00:07:26,319 --> 00:07:37,779
<font color="#E5E5E5">that is saved in a now let's run the</font>

116
00:07:31,569 --> 00:07:42,330
<font color="#CCCCCC">program</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> you see all the edges of the</font>

117
00:07:37,779 --> 00:07:42,330
minimum<font color="#E5E5E5"> spanning tree are printed out</font>

118
00:07:43,139 --> 00:07:49,719
lastly let's look<font color="#E5E5E5"> at the complexity of</font>

119
00:07:45,939 --> 00:07:53,620
this algorithm this wire loop is in the

120
00:07:49,719 --> 00:07:56,589
order of<font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> vertices and both</font>

121
00:07:53,620 --> 00:07:58,870
the find function<font color="#E5E5E5"> and the remove</font>

122
00:07:56,589 --> 00:08:02,849
<font color="#CCCCCC">function are in the order of number of</font>

123
00:07:58,870 --> 00:08:06,520
<font color="#CCCCCC">vertices</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> find function is also</font>

124
00:08:02,849 --> 00:08:09,878
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> of vertices</font><font color="#E5E5E5"> and the find</font>

125
00:08:06,520 --> 00:08:14,469
adjacent<font color="#E5E5E5"> is in the order</font><font color="#CCCCCC"> of number of</font>

126
00:08:09,879 --> 00:08:16,930
<font color="#E5E5E5">edges so for a space graph where</font><font color="#CCCCCC"> the</font>

127
00:08:14,469 --> 00:08:20,110
number<font color="#E5E5E5"> of edges</font><font color="#CCCCCC"> is less than the number</font>

128
00:08:16,930 --> 00:08:23,050
<font color="#CCCCCC">of vertices</font><font color="#E5E5E5"> which is more often</font><font color="#CCCCCC"> in</font>

129
00:08:20,110 --> 00:08:28,749
reality the complexity of this algorithm

130
00:08:23,050 --> 00:08:30,939
<font color="#E5E5E5">is in the order of</font><font color="#CCCCCC"> V square that's all</font>

131
00:08:28,749 --> 00:08:33,370
for<font color="#CCCCCC"> today</font><font color="#E5E5E5"> feel free</font><font color="#CCCCCC"> to subscribe</font><font color="#E5E5E5"> to my</font>

132
00:08:30,939 --> 00:08:36,569
<font color="#CCCCCC">channel and check out the</font><font color="#E5E5E5"> other videos I</font>

133
00:08:33,370 --> 00:08:36,568
have<font color="#CCCCCC"> bye-bye</font>

