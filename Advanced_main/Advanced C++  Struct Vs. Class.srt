1
00:00:03,230 --> 00:00:08,300
hello everyone today<font color="#CCCCCC"> we</font><font color="#E5E5E5"> will talk about</font>

2
00:00:05,850 --> 00:00:11,639
the difference between struct<font color="#E5E5E5"> and class</font>

3
00:00:08,300 --> 00:00:14,459
here we have a<font color="#CCCCCC"> struct off person</font><font color="#E5E5E5"> T and</font>

4
00:00:11,639 --> 00:00:18,060
it has a name of stream and<font color="#E5E5E5"> an age of</font>

5
00:00:14,459 --> 00:00:21,448
unsigned integer<font color="#E5E5E5"> and we also has a class</font>

6
00:00:18,060 --> 00:00:24,720
of person and it also has a name<font color="#E5E5E5"> of</font>

7
00:00:21,449 --> 00:00:26,340
string and age of unsigned integer<font color="#E5E5E5"> now</font>

8
00:00:24,720 --> 00:00:29,698
what's the<font color="#CCCCCC"> difference between these two</font>

9
00:00:26,340 --> 00:00:32,900
the difference is<font color="#E5E5E5"> for struct</font><font color="#CCCCCC"> it's data</font>

10
00:00:29,699 --> 00:00:38,010
members are public<font color="#E5E5E5"> by default</font><font color="#CCCCCC"> and</font>

11
00:00:32,900 --> 00:00:42,030
<font color="#E5E5E5">forecast</font><font color="#CCCCCC"> it's data members are private</font>

12
00:00:38,010 --> 00:00:44,099
by default<font color="#E5E5E5"> so this is the only</font>

13
00:00:42,030 --> 00:00:47,910
<font color="#E5E5E5">difference between struct and class as</font>

14
00:00:44,100 --> 00:00:50,100
far as the language<font color="#CCCCCC"> is concerned but</font>

15
00:00:47,910 --> 00:00:52,349
usually<font color="#E5E5E5"> we'll add another level of</font>

16
00:00:50,100 --> 00:00:56,640
semantic difference between struct<font color="#E5E5E5"> and</font>

17
00:00:52,350 --> 00:00:59,910
class struct<font color="#E5E5E5"> is used for small passive</font>

18
00:00:56,640 --> 00:01:03,720
objects that carry public data and have

19
00:00:59,910 --> 00:01:06,539
<font color="#CCCCCC">know of few basic member functions you</font>

20
00:01:03,720 --> 00:01:11,280
know in other words a struct<font color="#E5E5E5"> is used for</font>

21
00:01:06,539 --> 00:01:14,009
<font color="#E5E5E5">a data container and the class is</font>

22
00:01:11,280 --> 00:01:17,159
usually<font color="#E5E5E5"> used for bigger and therefore</font>

23
00:01:14,009 --> 00:01:20,670
more complicated active objects that

24
00:01:17,159 --> 00:01:23,850
carry private data and<font color="#E5E5E5"> it interface with</font>

25
00:01:20,670 --> 00:01:28,799
outside would flow public member

26
00:01:23,850 --> 00:01:34,490
functions in other words a class is used

27
00:01:28,799 --> 00:01:34,490
for more complex data structure

28
00:01:35,920 --> 00:01:41,360
but this is<font color="#E5E5E5"> just a convention</font><font color="#CCCCCC"> there's</font>

29
00:01:38,960 --> 00:01:43,399
nothing in the language<font color="#E5E5E5"> that enforces</font>

30
00:01:41,360 --> 00:01:46,610
you to follow this convention<font color="#CCCCCC"> for</font>

31
00:01:43,400 --> 00:01:47,750
example nothing can stop you from<font color="#E5E5E5"> giving</font>

32
00:01:46,610 --> 00:01:54,800
the<font color="#CCCCCC"> struct</font>

33
00:01:47,750 --> 00:01:56,870
a private data<font color="#E5E5E5"> integer height and</font><font color="#CCCCCC"> the</font>

34
00:01:54,800 --> 00:02:05,149
<font color="#CCCCCC">nothing can</font><font color="#E5E5E5"> stop you from</font><font color="#CCCCCC"> giving a class</font>

35
00:01:56,870 --> 00:02:07,910
a public data integer height however

36
00:02:05,150 --> 00:02:10,520
this is a good convention to follow and

37
00:02:07,910 --> 00:02:13,510
you'd better follow it unless you have

38
00:02:10,520 --> 00:02:13,510
<font color="#CCCCCC">some</font><font color="#E5E5E5"> special reason</font>

39
00:02:18,940 --> 00:02:24,530
another convention is a class data

40
00:02:21,980 --> 00:02:27,350
member are usually named with a trailing

41
00:02:24,530 --> 00:02:29,990
<font color="#E5E5E5">underscore and that struck the data</font>

42
00:02:27,350 --> 00:02:34,370
member<font color="#CCCCCC"> and named as the same way you</font>

43
00:02:29,990 --> 00:02:44,090
<font color="#E5E5E5">name a regular valuable now in the main</font>

44
00:02:34,370 --> 00:02:48,230
function<font color="#CCCCCC"> I create a person</font><font color="#E5E5E5"> t PT and I</font>

45
00:02:44,090 --> 00:02:52,100
can<font color="#E5E5E5"> access pts data member directly</font><font color="#CCCCCC"> G G</font>

46
00:02:48,230 --> 00:02:59,839
dot H for example<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to print it out</font>

47
00:02:52,100 --> 00:03:04,609
and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> I create a person P and I also</font>

48
00:02:59,840 --> 00:03:07,430
want to print out<font color="#CCCCCC"> piece H</font><font color="#E5E5E5"> this will not</font>

49
00:03:04,610 --> 00:03:11,330
compile<font color="#CCCCCC"> because H underscore is a</font>

50
00:03:07,430 --> 00:03:13,970
private<font color="#E5E5E5"> data of the person if I really</font>

51
00:03:11,330 --> 00:03:16,550
want to access the<font color="#CCCCCC"> private data of a</font>

52
00:03:13,970 --> 00:03:27,230
class<font color="#E5E5E5"> I have to</font><font color="#CCCCCC"> provide some public</font>

53
00:03:16,550 --> 00:03:30,560
interface for<font color="#E5E5E5"> that unsigned H and all</font>

54
00:03:27,230 --> 00:03:35,929
this function does is return the H

55
00:03:30,560 --> 00:03:39,370
<font color="#CCCCCC">underscore and then in the main function</font>

56
00:03:35,930 --> 00:03:39,370
I can<font color="#CCCCCC"> call age</font>

57
00:03:40,700 --> 00:03:45,470
and since this function<font color="#E5E5E5"> only fetch the</font>

58
00:03:43,400 --> 00:03:47,780
data of the age and that doesn't change

59
00:03:45,470 --> 00:03:51,890
<font color="#CCCCCC">it</font><font color="#E5E5E5"> so we should</font><font color="#CCCCCC"> make this function</font>

60
00:03:47,780 --> 00:03:54,800
constant function and if later<font color="#CCCCCC"> on I do</font>

61
00:03:51,890 --> 00:03:56,989
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change the age then we need to</font>

62
00:03:54,800 --> 00:03:59,890
provide<font color="#CCCCCC"> another public function to</font>

63
00:03:56,990 --> 00:03:59,890
change the age

64
00:04:09,830 --> 00:04:17,350
and in the main function<font color="#CCCCCC"> we can set the</font>

65
00:04:13,490 --> 00:04:17,350
age<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a different value</font>

66
00:04:22,340 --> 00:04:32,419
so this<font color="#E5E5E5"> function is usually called Gator</font>

67
00:04:26,360 --> 00:04:40,850
or accessor<font color="#E5E5E5"> and this function is usually</font>

68
00:04:32,419 --> 00:04:44,120
<font color="#E5E5E5">called setter or</font><font color="#CCCCCC"> near theta</font><font color="#E5E5E5"> and that</font>

69
00:04:40,850 --> 00:04:47,210
Gator<font color="#CCCCCC"> function is almost always a Const</font>

70
00:04:44,120 --> 00:04:50,360
function<font color="#E5E5E5"> now some of you may want to</font>

71
00:04:47,210 --> 00:04:53,719
start complaining<font color="#CCCCCC"> if we have a</font><font color="#E5E5E5"> private</font>

72
00:04:50,360 --> 00:04:56,570
data member and we defined getter and

73
00:04:53,720 --> 00:04:59,270
setter for this private<font color="#E5E5E5"> data member then</font>

74
00:04:56,570 --> 00:05:03,280
what's the point of making this<font color="#E5E5E5"> data</font>

75
00:04:59,270 --> 00:05:07,609
member private we could just make<font color="#CCCCCC"> it</font>

76
00:05:03,280 --> 00:05:09,919
public<font color="#E5E5E5"> and off sudden it saves us</font><font color="#CCCCCC"> the</font>

77
00:05:07,610 --> 00:05:15,040
additional<font color="#E5E5E5"> effort of defining these</font>

78
00:05:09,919 --> 00:05:17,750
<font color="#CCCCCC">valid</font><font color="#E5E5E5"> member functions when we create</font>

79
00:05:15,040 --> 00:05:21,650
object-oriented code<font color="#CCCCCC"> we want to separate</font>

80
00:05:17,750 --> 00:05:24,910
<font color="#E5E5E5">the interface from the implementation we</font>

81
00:05:21,650 --> 00:05:27,620
want to encapsulate the complicated

82
00:05:24,910 --> 00:05:31,160
<font color="#E5E5E5">implementation and only talk</font><font color="#CCCCCC"> to the</font>

83
00:05:27,620 --> 00:05:33,320
<font color="#CCCCCC">outside</font><font color="#E5E5E5"> world through interfaces and in</font>

84
00:05:31,160 --> 00:05:36,370
the in this<font color="#E5E5E5"> case these functions are</font>

85
00:05:33,320 --> 00:05:40,190
interface and these variables<font color="#CCCCCC"> are</font>

86
00:05:36,370 --> 00:05:42,590
implementation<font color="#E5E5E5"> if you make the data</font>

87
00:05:40,190 --> 00:05:45,350
member public essentially you are

88
00:05:42,590 --> 00:05:48,469
exposing the internal<font color="#CCCCCC"> implementation to</font>

89
00:05:45,350 --> 00:05:50,000
the<font color="#E5E5E5"> outside world which usually will</font>

90
00:05:48,470 --> 00:05:53,600
bring a<font color="#E5E5E5"> lot of headache</font>

91
00:05:50,000 --> 00:05:56,090
in<font color="#E5E5E5"> the long run for example if you're</font>

92
00:05:53,600 --> 00:06:00,800
later<font color="#E5E5E5"> on decided that</font><font color="#CCCCCC"> H underscore is</font>

93
00:05:56,090 --> 00:06:02,539
not<font color="#CCCCCC"> a proprietary</font><font color="#E5E5E5"> ball</font><font color="#CCCCCC"> you want to</font>

94
00:06:00,800 --> 00:06:05,419
change it with setter and getter

95
00:06:02,539 --> 00:06:08,719
function<font color="#E5E5E5"> it is very easy to change the</font>

96
00:06:05,419 --> 00:06:11,900
variable name but if the data<font color="#E5E5E5"> member is</font>

97
00:06:08,720 --> 00:06:14,600
public and your client has been using it

98
00:06:11,900 --> 00:06:17,630
or all over<font color="#CCCCCC"> the place then you have to</font>

99
00:06:14,600 --> 00:06:19,720
change this variable<font color="#E5E5E5"> in many different</font>

100
00:06:17,630 --> 00:06:23,090
<font color="#E5E5E5">places</font>

101
00:06:19,720 --> 00:06:26,690
another example<font color="#CCCCCC"> is if you want</font><font color="#E5E5E5"> to add</font>

102
00:06:23,090 --> 00:06:29,060
some rules<font color="#E5E5E5"> to setting the age for</font>

103
00:06:26,690 --> 00:06:32,570
<font color="#CCCCCC">example</font><font color="#E5E5E5"> a person's age should</font><font color="#CCCCCC"> not be</font>

104
00:06:29,060 --> 00:06:34,470
<font color="#E5E5E5">larger than 200 then with the set</font>

105
00:06:32,570 --> 00:06:37,230
function<font color="#CCCCCC"> you can easily</font>

106
00:06:34,470 --> 00:06:41,310
<font color="#E5E5E5">did you check at the beginning of this</font>

107
00:06:37,230 --> 00:06:44,670
function<font color="#E5E5E5"> but</font><font color="#CCCCCC"> if the valuable is public</font>

108
00:06:41,310 --> 00:06:48,450
<font color="#E5E5E5">then there's no easy way</font><font color="#CCCCCC"> to enforce that</font>

109
00:06:44,670 --> 00:06:52,560
rule so this<font color="#E5E5E5"> is the idea of having</font>

110
00:06:48,450 --> 00:06:59,159
setter and getter<font color="#E5E5E5"> function instead</font><font color="#CCCCCC"> of</font>

111
00:06:52,560 --> 00:07:01,830
<font color="#E5E5E5">making the variable public on the other</font>

112
00:06:59,160 --> 00:07:04,890
hand having<font color="#E5E5E5"> too</font><font color="#CCCCCC"> many of setter and the</font>

113
00:07:01,830 --> 00:07:08,219
getter function<font color="#CCCCCC"> is also</font><font color="#E5E5E5"> not a good</font>

114
00:07:04,890 --> 00:07:11,250
design<font color="#E5E5E5"> practice if I have to provide</font>

115
00:07:08,220 --> 00:07:15,060
setter and getter for many of my<font color="#E5E5E5"> private</font>

116
00:07:11,250 --> 00:07:18,540
data member<font color="#E5E5E5"> it means that my data need</font>

117
00:07:15,060 --> 00:07:21,960
<font color="#CCCCCC">to be used by somebody else if that is</font>

118
00:07:18,540 --> 00:07:26,810
<font color="#E5E5E5">the case why the data belongs to me why</font>

119
00:07:21,960 --> 00:07:26,810
the data<font color="#E5E5E5"> not belong to somebody else</font><font color="#CCCCCC"> so</font>

120
00:07:26,990 --> 00:07:32,400
<font color="#CCCCCC">having too many of setter and getter</font>

121
00:07:29,340 --> 00:07:35,520
<font color="#E5E5E5">function indicates</font><font color="#CCCCCC"> there's some problem</font>

122
00:07:32,400 --> 00:07:39,780
<font color="#CCCCCC">with my</font><font color="#E5E5E5"> ID file maybe I should architect</font>

123
00:07:35,520 --> 00:07:42,240
my design models in a different way<font color="#E5E5E5"> so</font>

124
00:07:39,780 --> 00:07:44,580
in<font color="#E5E5E5"> general you should avoid using too</font>

125
00:07:42,240 --> 00:07:49,200
many of setter and getter function<font color="#CCCCCC"> in</font>

126
00:07:44,580 --> 00:07:51,719
your<font color="#E5E5E5"> code</font><font color="#CCCCCC"> as a side note</font><font color="#E5E5E5"> some of you</font>

127
00:07:49,200 --> 00:07:54,510
might<font color="#CCCCCC"> be curious why we have this weird</font>

128
00:07:51,720 --> 00:07:58,380
convention of<font color="#E5E5E5"> trailing underscore for</font>

129
00:07:54,510 --> 00:08:02,969
cos theta member in the very old days

130
00:07:58,380 --> 00:08:06,750
many people use<font color="#CCCCCC"> M underscore to denote a</font>

131
00:08:02,970 --> 00:08:09,930
<font color="#E5E5E5">casted data member but then people start</font>

132
00:08:06,750 --> 00:08:12,120
<font color="#E5E5E5">to</font><font color="#CCCCCC"> think why using</font><font color="#E5E5E5"> two character to</font>

133
00:08:09,930 --> 00:08:15,450
denote<font color="#E5E5E5"> calculator member if we could</font>

134
00:08:12,120 --> 00:08:18,870
just<font color="#CCCCCC"> use one so some people think</font><font color="#E5E5E5"> of</font>

135
00:08:15,450 --> 00:08:21,360
using<font color="#E5E5E5"> leading underscore two for that</font>

136
00:08:18,870 --> 00:08:24,180
purpose<font color="#E5E5E5"> and actually the leading</font>

137
00:08:21,360 --> 00:08:27,540
underscore is the official<font color="#E5E5E5"> naming spin</font>

138
00:08:24,180 --> 00:08:30,479
aiming convention<font color="#CCCCCC"> in Python for private</font>

139
00:08:27,540 --> 00:08:34,530
class data member but<font color="#E5E5E5"> the problem with</font>

140
00:08:30,479 --> 00:08:36,960
<font color="#E5E5E5">C++</font><font color="#CCCCCC"> is the leading underscore is already</font>

141
00:08:34,530 --> 00:08:39,598
used for<font color="#CCCCCC"> other</font><font color="#E5E5E5"> purpose</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is used for</font>

142
00:08:36,960 --> 00:08:42,060
global variables<font color="#E5E5E5"> it is used</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

143
00:08:39,599 --> 00:08:45,540
internal implementation<font color="#E5E5E5"> related</font>

144
00:08:42,059 --> 00:08:47,849
variables particularly<font color="#E5E5E5"> the underscore</font>

145
00:08:45,540 --> 00:08:50,670
<font color="#E5E5E5">followed by a capital letter</font>

146
00:08:47,850 --> 00:08:54,569
and underscore underscore our<font color="#CCCCCC"> why</font><font color="#E5E5E5"> delay</font>

147
00:08:50,670 --> 00:08:57,449
<font color="#E5E5E5">used in the internal implementation this</font>

148
00:08:54,569 --> 00:09:00,479
is why people<font color="#CCCCCC"> have in vain invented the</font>

149
00:08:57,449 --> 00:09:03,899
<font color="#E5E5E5">trailing underscore notation for the</font>

150
00:09:00,480 --> 00:09:06,569
<font color="#CCCCCC">cast data member but again a</font><font color="#E5E5E5"> convention</font>

151
00:09:03,899 --> 00:09:09,899
is a convention there's nothing right or

152
00:09:06,569 --> 00:09:12,839
wrong here<font color="#E5E5E5"> and it is most important for</font>

153
00:09:09,899 --> 00:09:15,300
you to be consistent<font color="#E5E5E5"> with the existing</font>

154
00:09:12,839 --> 00:09:18,709
convention that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> used in the</font>

155
00:09:15,300 --> 00:09:21,060
<font color="#CCCCCC">project that you are</font><font color="#E5E5E5"> working on</font><font color="#CCCCCC"> a</font>

156
00:09:18,709 --> 00:09:21,810
summary of what<font color="#E5E5E5"> we have talked about</font>

157
00:09:21,060 --> 00:09:24,869
<font color="#CCCCCC">today</font>

158
00:09:21,810 --> 00:09:27,599
number one you struct<font color="#CCCCCC"> for passive</font>

159
00:09:24,870 --> 00:09:30,480
objects with public data and they use

160
00:09:27,600 --> 00:09:31,430
class<font color="#E5E5E5"> for active objects with private</font>

161
00:09:30,480 --> 00:09:33,990
data

162
00:09:31,430 --> 00:09:37,189
number two use setter and getter

163
00:09:33,990 --> 00:09:40,009
function<font color="#E5E5E5"> to access a class's data</font>

164
00:09:37,190 --> 00:09:43,860
instead<font color="#E5E5E5"> of making that data public</font>

165
00:09:40,009 --> 00:09:48,449
number<font color="#E5E5E5"> three avoid making setter and the</font>

166
00:09:43,860 --> 00:09:50,459
<font color="#CCCCCC">Dec getter function if possible thank</font>

167
00:09:48,449 --> 00:09:52,349
you for watching feel free to<font color="#CCCCCC"> subscribe</font>

168
00:09:50,459 --> 00:09:56,180
to<font color="#CCCCCC"> my channel and check out the other</font>

169
00:09:52,350 --> 00:09:56,180
videos I<font color="#CCCCCC"> have see</font><font color="#E5E5E5"> you next time</font>

