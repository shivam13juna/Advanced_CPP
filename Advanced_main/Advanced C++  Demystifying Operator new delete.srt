1
00:00:06,930 --> 00:00:12,639
hello everyone today's topic is

2
00:00:09,700 --> 00:00:15,209
<font color="#CCCCCC">operating new and operated delete</font><font color="#E5E5E5"> what</font>

3
00:00:12,639 --> 00:00:19,840
do they do and how<font color="#CCCCCC"> to overload</font><font color="#E5E5E5"> them</font>

4
00:00:15,209 --> 00:00:23,770
let's<font color="#E5E5E5"> start with the basic I'm creating</font>

5
00:00:19,840 --> 00:00:26,770
a dog on<font color="#E5E5E5"> the heap now exactly what</font><font color="#CCCCCC"> would</font>

6
00:00:23,770 --> 00:00:29,140
<font color="#CCCCCC">happen</font><font color="#E5E5E5"> as a result of this code there</font>

7
00:00:26,770 --> 00:00:32,079
<font color="#E5E5E5">are three things that would happen</font><font color="#CCCCCC"> and</font>

8
00:00:29,140 --> 00:00:35,350
they have been in a fixed order<font color="#E5E5E5"> step</font><font color="#CCCCCC"> one</font>

9
00:00:32,079 --> 00:00:38,579
<font color="#E5E5E5">the operator knew</font><font color="#CCCCCC"> this guy will be</font>

10
00:00:35,350 --> 00:00:42,730
<font color="#E5E5E5">called to allocate memory for dog</font>

11
00:00:38,579 --> 00:00:46,930
step<font color="#CCCCCC"> two the dopplers constructor this</font>

12
00:00:42,730 --> 00:00:50,500
guy is called<font color="#E5E5E5"> to create the dog step</font>

13
00:00:46,930 --> 00:00:54,340
<font color="#E5E5E5">three which is optional if step two dogs</font>

14
00:00:50,500 --> 00:00:56,680
constructor<font color="#CCCCCC"> throws the exception call</font>

15
00:00:54,340 --> 00:01:00,790
the operator delete<font color="#E5E5E5"> to free the memory</font>

16
00:00:56,680 --> 00:01:03,730
<font color="#E5E5E5">allocated in step one however if</font><font color="#CCCCCC"> the</font>

17
00:01:00,790 --> 00:01:06,579
step<font color="#E5E5E5"> one operate a new throw the</font>

18
00:01:03,730 --> 00:01:09,369
exception the operator delete will not

19
00:01:06,579 --> 00:01:11,949
be invoked<font color="#E5E5E5"> to free the memory because</font>

20
00:01:09,369 --> 00:01:15,880
the<font color="#CCCCCC"> C++ will assume the allocation of</font>

21
00:01:11,950 --> 00:01:18,100
<font color="#E5E5E5">memory has not been successful so you</font>

22
00:01:15,880 --> 00:01:22,689
<font color="#E5E5E5">need to keep that in mind when you write</font>

23
00:01:18,100 --> 00:01:25,509
your<font color="#E5E5E5"> own</font><font color="#CCCCCC"> operator new delete PD will do</font>

24
00:01:22,689 --> 00:01:28,449
the opposite<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> docks destructor</font>

25
00:01:25,509 --> 00:01:31,329
is called to destruct dog and step to

26
00:01:28,450 --> 00:01:34,659
operate the delete is<font color="#CCCCCC"> cut to free the</font>

27
00:01:31,329 --> 00:01:36,999
memory this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a simplified</font><font color="#E5E5E5"> version</font><font color="#CCCCCC"> of</font>

28
00:01:34,659 --> 00:01:40,209
operator new that I<font color="#CCCCCC"> use to demonstrate</font>

29
00:01:36,999 --> 00:01:43,089
<font color="#E5E5E5">what the standard operator new typically</font>

30
00:01:40,209 --> 00:01:47,469
does before<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> the details</font>

31
00:01:43,090 --> 00:01:49,810
let me introduce new handler new<font color="#E5E5E5"> handler</font>

32
00:01:47,469 --> 00:01:52,619
is a function that's invoked when<font color="#E5E5E5"> the</font>

33
00:01:49,810 --> 00:01:55,689
<font color="#E5E5E5">operator new</font><font color="#CCCCCC"> failed</font><font color="#E5E5E5"> to allocate memory</font>

34
00:01:52,619 --> 00:01:58,299
<font color="#E5E5E5">by default a new handler is a null</font>

35
00:01:55,689 --> 00:02:01,089
pointer<font color="#E5E5E5"> which means there's no new</font>

36
00:01:58,299 --> 00:02:03,429
handler<font color="#E5E5E5"> but you can always set a new</font>

37
00:02:01,090 --> 00:02:05,400
handler<font color="#CCCCCC"> with the set new handler</font>

38
00:02:03,429 --> 00:02:07,980
function

39
00:02:05,400 --> 00:02:10,800
set new<font color="#E5E5E5"> handler function not only</font>

40
00:02:07,980 --> 00:02:14,010
installs a new<font color="#CCCCCC"> vendor it also returns</font>

41
00:02:10,800 --> 00:02:19,110
<font color="#E5E5E5">the old new handle or the current new</font>

42
00:02:14,010 --> 00:02:21,600
handler<font color="#CCCCCC"> now let's look at the operator</font>

43
00:02:19,110 --> 00:02:24,630
new operate the new takes one parameter

44
00:02:21,600 --> 00:02:28,100
<font color="#E5E5E5">which is the size of the memory to be</font>

45
00:02:24,630 --> 00:02:33,390
<font color="#CCCCCC">allocated</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it it flows a bad air log</font>

46
00:02:28,100 --> 00:02:36,870
exceptions inside operator<font color="#E5E5E5"> new there's</font>

47
00:02:33,390 --> 00:02:39,209
an infinite loop<font color="#E5E5E5"> inside of the loop</font><font color="#CCCCCC"> and</font>

48
00:02:36,870 --> 00:02:42,780
<font color="#E5E5E5">the first thing it does</font><font color="#CCCCCC"> is to allocate</font><font color="#E5E5E5"> a</font>

49
00:02:39,210 --> 00:02:46,290
memory of<font color="#E5E5E5"> this size if the memory</font>

50
00:02:42,780 --> 00:02:49,200
allocation is successful then it returns

51
00:02:46,290 --> 00:02:49,890
the memory and it's done mission

52
00:02:49,200 --> 00:02:52,799
complete

53
00:02:49,890 --> 00:02:57,299
if the memory allocation is<font color="#CCCCCC"> not</font>

54
00:02:52,800 --> 00:03:00,990
successful<font color="#E5E5E5"> and then it will fetch the</font>

55
00:02:57,300 --> 00:03:05,520
<font color="#E5E5E5">current new handler and check if the new</font>

56
00:03:00,990 --> 00:03:09,540
<font color="#E5E5E5">handle is now if it is not now invoke</font>

57
00:03:05,520 --> 00:03:11,700
the new<font color="#E5E5E5"> handle function after that go</font>

58
00:03:09,540 --> 00:03:14,790
<font color="#E5E5E5">back to the loop and try to</font><font color="#CCCCCC"> allocate</font><font color="#E5E5E5"> the</font>

59
00:03:11,700 --> 00:03:17,190
memory again<font color="#E5E5E5"> so you might you</font><font color="#CCCCCC"> might have</font>

60
00:03:14,790 --> 00:03:20,790
guessed<font color="#CCCCCC"> the purpose of the new handler</font>

61
00:03:17,190 --> 00:03:23,970
<font color="#CCCCCC">is to make more memory available so that</font>

62
00:03:20,790 --> 00:03:29,579
<font color="#E5E5E5">next run of memory allocation could be</font>

63
00:03:23,970 --> 00:03:32,010
successful if the<font color="#E5E5E5"> handler is a null</font>

64
00:03:29,580 --> 00:03:36,209
pointer<font color="#E5E5E5"> which means there's nothing</font><font color="#CCCCCC"> I</font>

65
00:03:32,010 --> 00:03:41,850
can do<font color="#E5E5E5"> to free the memory then it</font><font color="#CCCCCC"> will</font>

66
00:03:36,209 --> 00:03:44,340
<font color="#E5E5E5">just throw a bad</font><font color="#CCCCCC"> I log exception</font><font color="#E5E5E5"> these</font>

67
00:03:41,850 --> 00:03:47,310
are the things that standard<font color="#E5E5E5"> operating</font>

68
00:03:44,340 --> 00:03:49,440
<font color="#E5E5E5">you typically does you can overload</font><font color="#CCCCCC"> the</font>

69
00:03:47,310 --> 00:03:52,350
operator new to do whatever<font color="#E5E5E5"> things that</font>

70
00:03:49,440 --> 00:03:55,350
<font color="#E5E5E5">you want to do but it is generally a</font>

71
00:03:52,350 --> 00:03:59,040
good<font color="#CCCCCC"> practice to</font><font color="#E5E5E5"> follow the same format</font>

72
00:03:55,350 --> 00:04:04,079
of<font color="#E5E5E5"> say the standard operate on you such</font>

73
00:03:59,040 --> 00:04:07,140
as a wire loop bad<font color="#E5E5E5"> a log exceptions</font>

74
00:04:04,080 --> 00:04:10,550
you may have<font color="#E5E5E5"> noticed that that here we</font>

75
00:04:07,140 --> 00:04:13,260
<font color="#CCCCCC">are defining a global operator</font><font color="#E5E5E5"> new</font>

76
00:04:10,550 --> 00:04:15,450
<font color="#E5E5E5">sometimes you don't want to overload the</font>

77
00:04:13,260 --> 00:04:18,029
global or upload the new you only want

78
00:04:15,450 --> 00:04:22,560
to<font color="#E5E5E5"> overload the operator new for your</font>

79
00:04:18,029 --> 00:04:25,830
own class<font color="#CCCCCC"> and here we are defining a</font>

80
00:04:22,560 --> 00:04:30,030
member operating<font color="#E5E5E5"> new for our class dog</font>

81
00:04:25,830 --> 00:04:33,300
<font color="#E5E5E5">and the out member operating new also</font>

82
00:04:30,030 --> 00:04:37,080
takes<font color="#E5E5E5"> the one parameter of size and also</font>

83
00:04:33,300 --> 00:04:39,690
throws up a<font color="#E5E5E5"> dialog exceptions and inside</font>

84
00:04:37,080 --> 00:04:43,370
the operator new<font color="#E5E5E5"> I call a function</font>

85
00:04:39,690 --> 00:04:50,010
<font color="#CCCCCC">customer new for dog which creates size</font>

86
00:04:43,370 --> 00:04:52,290
this<font color="#E5E5E5"> size</font><font color="#CCCCCC"> of the memory</font><font color="#E5E5E5"> for dog now I</font>

87
00:04:50,010 --> 00:04:55,830
have a yellow<font color="#E5E5E5"> dog which</font><font color="#CCCCCC"> is derived from</font>

88
00:04:52,290 --> 00:05:00,510
dog and in the main<font color="#E5E5E5"> function I created a</font>

89
00:04:55,830 --> 00:05:04,890
new yellow dog on the heap now do you

90
00:05:00,510 --> 00:05:06,930
smell any problem from<font color="#E5E5E5"> this code the</font>

91
00:05:04,890 --> 00:05:09,419
dogs<font color="#E5E5E5"> operate the new is a public</font>

92
00:05:06,930 --> 00:05:12,600
function that<font color="#E5E5E5"> means it will be inherited</font>

93
00:05:09,419 --> 00:05:15,000
by<font color="#CCCCCC"> its child</font><font color="#E5E5E5"> yellow duck so when I</font>

94
00:05:12,600 --> 00:05:17,910
create a yellow dog on the heap<font color="#E5E5E5"> it will</font>

95
00:05:15,000 --> 00:05:21,480
actually call the dogs of<font color="#E5E5E5"> revenue not</font>

96
00:05:17,910 --> 00:05:24,270
the standard<font color="#E5E5E5"> operating you as a result</font>

97
00:05:21,480 --> 00:05:27,060
<font color="#CCCCCC">I'll be calling customer new for dog</font><font color="#E5E5E5"> to</font>

98
00:05:24,270 --> 00:05:29,969
allocate a memory for<font color="#E5E5E5"> yellow dog which</font>

99
00:05:27,060 --> 00:05:31,850
may or may not be what what<font color="#E5E5E5"> I have in</font>

100
00:05:29,970 --> 00:05:36,710
mind

101
00:05:31,850 --> 00:05:40,169
suppose I don't<font color="#E5E5E5"> want that what can I do</font>

102
00:05:36,710 --> 00:05:42,359
creating a new yellow dog invokes the

103
00:05:40,169 --> 00:05:45,539
dogs operating you<font color="#E5E5E5"> however what</font>

104
00:05:42,360 --> 00:05:48,510
parameter will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> positive to the</font><font color="#CCCCCC"> dog's</font>

105
00:05:45,540 --> 00:05:52,680
<font color="#E5E5E5">operating you will be the dog size or</font>

106
00:05:48,510 --> 00:05:55,560
the<font color="#E5E5E5"> yellow dollar size fortunately it's</font>

107
00:05:52,680 --> 00:05:58,200
the yellow<font color="#CCCCCC"> dog size so inside the</font>

108
00:05:55,560 --> 00:06:02,090
operating<font color="#E5E5E5"> new for dog</font><font color="#CCCCCC"> I could do some</font>

109
00:05:58,200 --> 00:06:02,090
check based on that

110
00:06:08,510 --> 00:06:13,880
if the size of<font color="#E5E5E5"> the size is equal to</font><font color="#CCCCCC"> dot</font>

111
00:06:13,190 --> 00:06:17,140
<font color="#CCCCCC">size</font>

112
00:06:13,880 --> 00:06:20,000
I'll call the customer new for dog

113
00:06:17,140 --> 00:06:31,450
otherwise I'll call the standard

114
00:06:20,000 --> 00:06:31,450
<font color="#E5E5E5">operating you for yellow</font><font color="#CCCCCC"> duck</font>

115
00:06:31,550 --> 00:06:39,169
so this is one solution<font color="#E5E5E5"> another solution</font>

116
00:06:34,580 --> 00:06:41,900
is<font color="#E5E5E5"> since I've been defining a customized</font>

117
00:06:39,169 --> 00:06:45,740
and operate the new<font color="#E5E5E5"> fourth dog</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> I</font>

118
00:06:41,900 --> 00:06:51,289
could I want to define a customized<font color="#E5E5E5"> new</font>

119
00:06:45,740 --> 00:06:57,139
<font color="#CCCCCC">four yellow dog too so that's a second</font>

120
00:06:51,289 --> 00:06:59,840
<font color="#E5E5E5">solution now let's look at operator</font>

121
00:06:57,139 --> 00:07:02,389
delete an operator delete<font color="#CCCCCC"> takes</font><font color="#E5E5E5"> one</font>

122
00:06:59,840 --> 00:07:06,770
parameter<font color="#CCCCCC"> width which is a pointer to</font>

123
00:07:02,389 --> 00:07:10,130
the memory to be deleted<font color="#CCCCCC"> and it is not</font>

124
00:07:06,770 --> 00:07:12,979
supposed to throw any exception here

125
00:07:10,130 --> 00:07:16,610
I've overloaded the operator delete<font color="#E5E5E5"> for</font>

126
00:07:12,979 --> 00:07:19,969
dog and<font color="#E5E5E5"> over later the operator delete</font>

127
00:07:16,610 --> 00:07:23,889
for yellow dog<font color="#E5E5E5"> so the problem of the</font>

128
00:07:19,970 --> 00:07:26,870
previous example will<font color="#CCCCCC"> not exist here in</font>

129
00:07:23,889 --> 00:07:29,930
<font color="#CCCCCC">the</font><font color="#E5E5E5"> main</font><font color="#CCCCCC"> function I create a new yellow</font>

130
00:07:26,870 --> 00:07:34,150
dog on the heap<font color="#E5E5E5"> and assigns pointer to a</font>

131
00:07:29,930 --> 00:07:38,319
<font color="#E5E5E5">Doc's pointer PT and later I delete PD</font>

132
00:07:34,150 --> 00:07:41,900
do you see any problem with<font color="#CCCCCC"> this code</font>

133
00:07:38,319 --> 00:07:45,590
when I delete PD which operator delete

134
00:07:41,900 --> 00:07:50,359
will be invoked<font color="#E5E5E5"> that's right</font><font color="#CCCCCC"> it's the</font>

135
00:07:45,590 --> 00:07:53,448
<font color="#CCCCCC">Doc's</font><font color="#E5E5E5"> operator elite will be involved so</font>

136
00:07:50,360 --> 00:07:56,900
<font color="#CCCCCC">I end up using</font><font color="#E5E5E5"> the talks operator delete</font>

137
00:07:53,449 --> 00:08:00,139
<font color="#E5E5E5">to</font><font color="#CCCCCC"> Tilke allocate the memory that's</font><font color="#E5E5E5"> been</font>

138
00:07:56,900 --> 00:08:05,479
allocated<font color="#E5E5E5"> for</font><font color="#CCCCCC"> yellow</font><font color="#E5E5E5"> dot which smells</font>

139
00:08:00,139 --> 00:08:09,110
trouble so what can I do you may

140
00:08:05,479 --> 00:08:12,940
immediately suggest that making the

141
00:08:09,110 --> 00:08:12,940
operator delete of virtual function

142
00:08:14,910 --> 00:08:21,850
then the correct<font color="#E5E5E5"> operated delete will be</font>

143
00:08:18,010 --> 00:08:25,150
invoked right<font color="#E5E5E5"> this is certainly will not</font>

144
00:08:21,850 --> 00:08:30,960
<font color="#E5E5E5">work you cannot define a function to be</font>

145
00:08:25,150 --> 00:08:34,059
<font color="#E5E5E5">both virtual and</font><font color="#CCCCCC"> Static because a</font>

146
00:08:30,960 --> 00:08:37,478
<font color="#E5E5E5">function being static specifies the</font>

147
00:08:34,059 --> 00:08:41,439
behavior of the class it has<font color="#E5E5E5"> it is not</font>

148
00:08:37,479 --> 00:08:43,960
<font color="#E5E5E5">directly tied to the object and a</font>

149
00:08:41,440 --> 00:08:47,830
function being virtual specifies the

150
00:08:43,960 --> 00:08:50,460
behavior of the object<font color="#E5E5E5"> so static and</font>

151
00:08:47,830 --> 00:08:54,880
virtual<font color="#CCCCCC"> belonged</font><font color="#E5E5E5"> to different</font><font color="#CCCCCC"> world that</font>

152
00:08:50,460 --> 00:08:57,850
<font color="#CCCCCC">is why it is</font><font color="#E5E5E5"> forbidden</font><font color="#CCCCCC"> insecure in</font><font color="#E5E5E5"> C++</font>

153
00:08:54,880 --> 00:09:05,530
<font color="#CCCCCC">to define a function to be</font><font color="#E5E5E5"> both virtual</font>

154
00:08:57,850 --> 00:09:07,990
and<font color="#E5E5E5"> static then what's our solution if</font>

155
00:09:05,530 --> 00:09:11,770
you<font color="#E5E5E5"> remember a previous session we've</font>

156
00:09:07,990 --> 00:09:15,100
talked about that<font color="#E5E5E5"> if a class is meant to</font>

157
00:09:11,770 --> 00:09:19,870
be used polymorphically<font color="#E5E5E5"> it should have a</font>

158
00:09:15,100 --> 00:09:22,840
virtual destructor that rules<font color="#E5E5E5"> applies</font>

159
00:09:19,870 --> 00:09:26,940
here also we need to define a virtual

160
00:09:22,840 --> 00:09:26,940
destructor for dog

161
00:09:29,309 --> 00:09:35,649
even though the virtual destructor

162
00:09:31,839 --> 00:09:37,809
doesn't do anything<font color="#E5E5E5"> now when I delete PD</font>

163
00:09:35,649 --> 00:09:41,079
it will invoke<font color="#CCCCCC"> the yellow ducks</font>

164
00:09:37,809 --> 00:09:45,670
destructor and magically invoke the

165
00:09:41,079 --> 00:09:48,248
yellow dogs<font color="#CCCCCC"> operated delete now let's</font>

166
00:09:45,670 --> 00:09:51,309
talk about<font color="#E5E5E5"> why and when we want to</font>

167
00:09:48,249 --> 00:09:54,399
<font color="#CCCCCC">customize new and delete here I</font><font color="#E5E5E5"> list</font>

168
00:09:51,309 --> 00:09:57,850
some of scenarios when you want<font color="#E5E5E5"> to</font>

169
00:09:54,399 --> 00:10:02,470
<font color="#E5E5E5">customize new and delete but this is far</font>

170
00:09:57,850 --> 00:10:06,550
from<font color="#E5E5E5"> a complete list first category is a</font>

171
00:10:02,470 --> 00:10:09,850
usage and a detection<font color="#E5E5E5"> for example memory</font>

172
00:10:06,550 --> 00:10:12,160
leak<font color="#CCCCCC"> if I keep in the operator new</font><font color="#E5E5E5"> I</font>

173
00:10:09,850 --> 00:10:14,800
keep a record<font color="#E5E5E5"> of all the memory being</font>

174
00:10:12,160 --> 00:10:17,199
<font color="#E5E5E5">allocated</font><font color="#CCCCCC"> and the in the operator delete</font>

175
00:10:14,800 --> 00:10:20,559
<font color="#E5E5E5">I remove the memory from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> record I</font>

176
00:10:17,199 --> 00:10:24,609
will<font color="#E5E5E5"> have a list of the memory being and</font>

177
00:10:20,559 --> 00:10:29,529
leak and possibly<font color="#E5E5E5"> I can also implement</font>

178
00:10:24,610 --> 00:10:33,730
my own<font color="#E5E5E5"> garbage collection mechanism only</font>

179
00:10:29,529 --> 00:10:37,420
<font color="#E5E5E5">index over long and under on in the</font>

180
00:10:33,730 --> 00:10:40,449
operator new if I assign a special

181
00:10:37,420 --> 00:10:43,209
signature<font color="#E5E5E5"> to the first item</font><font color="#CCCCCC"> of Nan array</font>

182
00:10:40,449 --> 00:10:45,969
and another<font color="#E5E5E5"> signature to the last item</font>

183
00:10:43,209 --> 00:10:49,949
of<font color="#CCCCCC"> the load array</font><font color="#E5E5E5"> then I will be able to</font>

184
00:10:45,970 --> 00:10:52,809
detect<font color="#E5E5E5"> array overall and under</font><font color="#CCCCCC"> long</font>

185
00:10:49,949 --> 00:10:55,508
improve<font color="#E5E5E5"> your vision see I could</font>

186
00:10:52,809 --> 00:10:59,740
clustering related objects to the same

187
00:10:55,509 --> 00:11:02,589
place and to reduce page fault<font color="#CCCCCC"> I could</font>

188
00:10:59,740 --> 00:11:05,499
use fixed<font color="#CCCCCC"> size allocation which is good</font>

189
00:11:02,589 --> 00:11:10,600
for application with many small objects

190
00:11:05,499 --> 00:11:13,629
<font color="#E5E5E5">I could use</font><font color="#CCCCCC"> racket aligned similar</font><font color="#E5E5E5"> sized</font>

191
00:11:10,600 --> 00:11:16,689
objects to the same place to reduce

192
00:11:13,629 --> 00:11:21,009
memory fragmentation<font color="#E5E5E5"> the third category</font>

193
00:11:16,689 --> 00:11:23,219
is performing additional tasks<font color="#E5E5E5"> if my</font>

194
00:11:21,009 --> 00:11:26,649
<font color="#E5E5E5">program is dealing with high security</font>

195
00:11:23,220 --> 00:11:29,649
information<font color="#E5E5E5"> it is a good</font><font color="#CCCCCC"> idea to feel</font>

196
00:11:26,649 --> 00:11:32,199
that the<font color="#E5E5E5"> allocated</font><font color="#CCCCCC"> memory with zeros to</font>

197
00:11:29,649 --> 00:11:35,790
prevent those information to be leaked

198
00:11:32,199 --> 00:11:35,790
<font color="#E5E5E5">to the outside world</font>

199
00:11:36,390 --> 00:11:42,030
lastly<font color="#CCCCCC"> I could use the operator</font><font color="#E5E5E5"> new to</font>

200
00:11:39,510 --> 00:11:46,939
collect the usage statics of the memory

201
00:11:42,030 --> 00:11:50,970
for example<font color="#CCCCCC"> what's the average</font><font color="#E5E5E5"> size of</font>

202
00:11:46,940 --> 00:11:54,750
dynamically allocated memory<font color="#E5E5E5"> what's the</font>

203
00:11:50,970 --> 00:12:01,170
biggest size of the<font color="#E5E5E5"> memory how often the</font>

204
00:11:54,750 --> 00:12:03,870
memory allocation is performed etc the

205
00:12:01,170 --> 00:12:06,660
last thing to keep in<font color="#CCCCCC"> mind is it is easy</font>

206
00:12:03,870 --> 00:12:10,020
to write our operator<font color="#CCCCCC"> knew and operated</font>

207
00:12:06,660 --> 00:12:15,150
delete that works but it is<font color="#E5E5E5"> very hard</font><font color="#CCCCCC"> to</font>

208
00:12:10,020 --> 00:12:17,430
<font color="#E5E5E5">write a good memory manager so before</font>

209
00:12:15,150 --> 00:12:20,370
<font color="#E5E5E5">you start off writing your own</font><font color="#CCCCCC"> version</font>

210
00:12:17,430 --> 00:12:23,069
<font color="#E5E5E5">of new and delete you had there are two</font>

211
00:12:20,370 --> 00:12:25,470
alternative<font color="#E5E5E5"> that you can consider number</font>

212
00:12:23,070 --> 00:12:25,950
one<font color="#CCCCCC"> trick your compiler toward your</font>

213
00:12:25,470 --> 00:12:28,560
needs

214
00:12:25,950 --> 00:12:32,490
<font color="#E5E5E5">read your compilers document carefully</font>

215
00:12:28,560 --> 00:12:35,599
<font color="#CCCCCC">and see</font><font color="#E5E5E5"> if there</font><font color="#CCCCCC"> is something you can</font>

216
00:12:32,490 --> 00:12:39,020
<font color="#CCCCCC">use that the compiler already provide</font>

217
00:12:35,600 --> 00:12:42,660
the second<font color="#CCCCCC"> option is search</font><font color="#E5E5E5"> the web for</font>

218
00:12:39,020 --> 00:12:45,600
<font color="#E5E5E5">memory management library there are many</font>

219
00:12:42,660 --> 00:12:48,510
good<font color="#E5E5E5"> many memory management library out</font>

220
00:12:45,600 --> 00:12:53,370
<font color="#E5E5E5">there for example the poor library from</font>

221
00:12:48,510 --> 00:12:56,400
boost if the two alternatives<font color="#E5E5E5"> doesn't</font>

222
00:12:53,370 --> 00:12:58,710
work<font color="#E5E5E5"> for you then it's a time for you to</font>

223
00:12:56,400 --> 00:13:01,020
write your<font color="#CCCCCC"> own</font><font color="#E5E5E5"> version of the new and</font>

224
00:12:58,710 --> 00:13:03,900
delete<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

225
00:13:01,020 --> 00:13:08,750
this wraps up our topic with the<font color="#CCCCCC"> new and</font>

226
00:13:03,900 --> 00:13:08,750
delete<font color="#E5E5E5"> bye bye and see you</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> time</font>

