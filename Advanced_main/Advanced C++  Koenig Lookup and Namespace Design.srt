1
00:00:05,230 --> 00:00:11,809
hello everyone last<font color="#E5E5E5"> time we've talked</font>

2
00:00:08,630 --> 00:00:14,090
about<font color="#E5E5E5"> Caidic look up</font><font color="#CCCCCC"> kenick look</font><font color="#E5E5E5"> up is</font>

3
00:00:11,809 --> 00:00:17,419
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> purpose of function name search</font>

4
00:00:14,090 --> 00:00:19,880
it temporarily extend the scope of

5
00:00:17,420 --> 00:00:23,169
function name search to the space where

6
00:00:19,880 --> 00:00:26,660
<font color="#CCCCCC">the function parameter type is defined</font>

7
00:00:23,169 --> 00:00:30,320
so in<font color="#E5E5E5"> this case it will extend the name</font>

8
00:00:26,660 --> 00:00:35,510
search scope for G to the<font color="#E5E5E5"> space</font><font color="#CCCCCC"> where X</font>

9
00:00:30,320 --> 00:00:38,660
is defined now<font color="#E5E5E5"> it is really a good</font><font color="#CCCCCC"> thing</font>

10
00:00:35,510 --> 00:00:41,989
<font color="#E5E5E5">for us doesn't that defeat the</font><font color="#CCCCCC"> very</font>

11
00:00:38,660 --> 00:00:46,190
purpose of namespace<font color="#E5E5E5"> and expose us</font><font color="#CCCCCC"> to</font>

12
00:00:41,989 --> 00:00:49,099
<font color="#CCCCCC">the danger of name crash another thing</font>

13
00:00:46,190 --> 00:00:51,769
is if I have another<font color="#E5E5E5"> function G</font><font color="#CCCCCC"> which</font>

14
00:00:49,100 --> 00:00:55,280
<font color="#E5E5E5">also in a namespace</font><font color="#CCCCCC"> and it doesn't take</font>

15
00:00:51,769 --> 00:01:01,190
parameter<font color="#E5E5E5"> and then in main</font><font color="#CCCCCC"> function I</font>

16
00:00:55,280 --> 00:01:06,680
call this function G this apparently

17
00:01:01,190 --> 00:01:09,530
<font color="#E5E5E5">will</font><font color="#CCCCCC"> not work so this call will succeed</font>

18
00:01:06,680 --> 00:01:11,600
<font color="#E5E5E5">and this call will fail and that</font><font color="#CCCCCC"> they</font>

19
00:01:09,530 --> 00:01:13,910
<font color="#E5E5E5">are both under the same context and</font>

20
00:01:11,600 --> 00:01:16,640
calling a function<font color="#E5E5E5"> from the same</font>

21
00:01:13,910 --> 00:01:20,390
namespace<font color="#E5E5E5"> doesn't that look a little</font>

22
00:01:16,640 --> 00:01:23,330
weird<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> a little weird if</font><font color="#E5E5E5"> you are</font>

23
00:01:20,390 --> 00:01:26,030
not not used to viewing parameter as a

24
00:01:23,330 --> 00:01:30,380
way<font color="#CCCCCC"> of expanding</font><font color="#E5E5E5"> the looking up scope</font>

25
00:01:26,030 --> 00:01:33,350
for function nevertheless<font color="#E5E5E5"> Kinnick lookup</font>

26
00:01:30,380 --> 00:01:36,500
is a good thing to have<font color="#E5E5E5"> and there are</font>

27
00:01:33,350 --> 00:01:38,660
two main reason<font color="#E5E5E5"> behind that one is a</font>

28
00:01:36,500 --> 00:01:42,440
practical<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> and another one is a</font>

29
00:01:38,660 --> 00:01:45,170
theoretical<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> let me start with the</font>

30
00:01:42,440 --> 00:01:47,899
practical reason<font color="#E5E5E5"> this is the code that</font>

31
00:01:45,170 --> 00:01:51,710
<font color="#E5E5E5">we</font><font color="#CCCCCC"> use very often it prints out some</font>

32
00:01:47,900 --> 00:01:54,950
message<font color="#CCCCCC"> to distend</font><font color="#E5E5E5"> it out however the</font>

33
00:01:51,710 --> 00:01:58,429
reason<font color="#E5E5E5"> this code can work is because of</font>

34
00:01:54,950 --> 00:02:01,910
<font color="#CCCCCC">kenick</font><font color="#E5E5E5"> lookup although in the code we</font>

35
00:01:58,430 --> 00:02:04,400
only have one<font color="#CCCCCC"> stood qualifier there are</font>

36
00:02:01,910 --> 00:02:08,500
two things<font color="#E5E5E5"> in the code that comes from</font>

37
00:02:04,400 --> 00:02:13,780
the Stute namespace<font color="#E5E5E5"> one is the</font><font color="#CCCCCC"> sea</font><font color="#E5E5E5"> out</font>

38
00:02:08,500 --> 00:02:13,780
<font color="#E5E5E5">another one is the left shifter</font>

39
00:02:13,800 --> 00:02:26,200
so if we don't have can<font color="#E5E5E5"> look up we'll</font>

40
00:02:17,800 --> 00:02:30,400
end up<font color="#CCCCCC"> having something like this this</font>

41
00:02:26,200 --> 00:02:33,250
<font color="#E5E5E5">is</font><font color="#CCCCCC"> very ugly and what's worse is this</font>

42
00:02:30,400 --> 00:02:35,560
code won't even compile<font color="#E5E5E5"> in order for it</font>

43
00:02:33,250 --> 00:02:37,769
to compile<font color="#E5E5E5"> you have to do something like</font>

44
00:02:35,560 --> 00:02:37,769
this

45
00:02:44,980 --> 00:02:50,859
this is even uglier<font color="#CCCCCC"> than previous one</font><font color="#E5E5E5"> so</font>

46
00:02:48,209 --> 00:02:53,040
<font color="#CCCCCC">having shown you the alternatives I</font>

47
00:02:50,860 --> 00:02:57,129
imagine you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> started appreciating</font>

48
00:02:53,040 --> 00:03:00,519
<font color="#CCCCCC">Koenig</font><font color="#E5E5E5"> look up can you look up make it</font>

49
00:02:57,129 --> 00:03:02,980
easier to<font color="#E5E5E5"> mimic the behavior of operator</font>

50
00:03:00,519 --> 00:03:05,590
<font color="#CCCCCC">let's provided a bicycle path core</font>

51
00:03:02,980 --> 00:03:11,140
language<font color="#E5E5E5"> therefore</font><font color="#CCCCCC"> makes your code</font>

52
00:03:05,590 --> 00:03:14,019
cleaner now<font color="#E5E5E5"> the theoretical</font><font color="#CCCCCC"> reason let's</font>

53
00:03:11,140 --> 00:03:18,640
ask the<font color="#CCCCCC"> question what</font><font color="#E5E5E5"> is the interface</font>

54
00:03:14,019 --> 00:03:21,790
<font color="#CCCCCC">of class we have a namespace</font><font color="#E5E5E5"> a and</font>

55
00:03:18,640 --> 00:03:26,018
inside a we have a<font color="#CCCCCC"> Class</font><font color="#E5E5E5"> C what is</font><font color="#CCCCCC"> the</font>

56
00:03:21,790 --> 00:03:28,540
<font color="#CCCCCC">interface</font><font color="#E5E5E5"> of C apparently all the public</font>

57
00:03:26,019 --> 00:03:33,549
functions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> define inside a</font><font color="#CCCCCC"> C are</font>

58
00:03:28,540 --> 00:03:36,160
part of the<font color="#E5E5E5"> interface of C however if I</font>

59
00:03:33,549 --> 00:03:41,620
have another function<font color="#E5E5E5"> called void H</font>

60
00:03:36,160 --> 00:03:44,769
which operate on C the function H belong

61
00:03:41,620 --> 00:03:48,090
to in the face of C if you are

62
00:03:44,769 --> 00:03:52,600
hesitating let me give you another one

63
00:03:48,090 --> 00:03:56,739
<font color="#E5E5E5">the left shift operator that this guy</font>

64
00:03:52,600 --> 00:03:59,888
look like<font color="#E5E5E5"> interface of C I would argue</font>

65
00:03:56,739 --> 00:04:03,519
both of them should<font color="#CCCCCC"> be part of the</font>

66
00:03:59,889 --> 00:04:07,329
interface<font color="#CCCCCC"> of C</font><font color="#E5E5E5"> let's look at the</font>

67
00:04:03,519 --> 00:04:10,930
<font color="#CCCCCC">definition of</font><font color="#E5E5E5"> a class a class describes</font>

68
00:04:07,329 --> 00:04:14,110
a set of data along<font color="#CCCCCC"> with the functions</font>

69
00:04:10,930 --> 00:04:17,290
<font color="#E5E5E5">that operate on that data</font>

70
00:04:14,110 --> 00:04:19,900
so the definition<font color="#E5E5E5"> didn't say along</font><font color="#CCCCCC"> with</font>

71
00:04:17,290 --> 00:04:24,910
<font color="#CCCCCC">the member functions or that operate</font><font color="#E5E5E5"> on</font>

72
00:04:19,899 --> 00:04:27,640
<font color="#CCCCCC">the data</font><font color="#E5E5E5"> it only says functions so by</font>

73
00:04:24,910 --> 00:04:32,020
definition<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function H and the left</font>

74
00:04:27,640 --> 00:04:36,630
shift operator are not excluded from the

75
00:04:32,020 --> 00:04:40,270
class<font color="#E5E5E5"> and if you really</font><font color="#CCCCCC"> think about it</font>

76
00:04:36,630 --> 00:04:42,340
<font color="#E5E5E5">from Siskinds point of view there is no</font>

77
00:04:40,270 --> 00:04:46,780
fundamental difference<font color="#CCCCCC"> between using</font>

78
00:04:42,340 --> 00:04:49,270
<font color="#E5E5E5">function f and function h in either case</font>

79
00:04:46,780 --> 00:04:53,679
<font color="#E5E5E5">they are using Class C and calling some</font>

80
00:04:49,270 --> 00:04:56,680
function that<font color="#E5E5E5"> operates on Class C now</font>

81
00:04:53,680 --> 00:04:59,980
suppose I<font color="#CCCCCC"> have another function J which</font>

82
00:04:56,680 --> 00:05:02,920
also<font color="#E5E5E5"> operate on C but it is outside of</font>

83
00:04:59,980 --> 00:05:05,610
the<font color="#CCCCCC"> namespace of a where</font><font color="#E5E5E5"> you're called a</font>

84
00:05:02,920 --> 00:05:07,060
function part of C's interface

85
00:05:05,610 --> 00:05:10,450
apparently not

86
00:05:07,060 --> 00:05:15,340
J looks very much like a<font color="#CCCCCC"> client function</font>

87
00:05:10,450 --> 00:05:17,800
that operates on Class C so with that

88
00:05:15,340 --> 00:05:21,940
<font color="#E5E5E5">I'm introducing a important engineering</font>

89
00:05:17,800 --> 00:05:25,120
<font color="#E5E5E5">principle the principle says functions</font>

90
00:05:21,940 --> 00:05:27,910
that operate on<font color="#E5E5E5"> Class C and in the same</font>

91
00:05:25,120 --> 00:05:31,570
namespace with C<font color="#CCCCCC"> are part of C's</font>

92
00:05:27,910 --> 00:05:34,210
interface<font color="#CCCCCC"> vice-versa</font><font color="#E5E5E5"> functions that are</font>

93
00:05:31,570 --> 00:05:39,040
part of this<font color="#E5E5E5"> interface should be in the</font>

94
00:05:34,210 --> 00:05:42,880
same namespace<font color="#E5E5E5"> as C say I have defined</font>

95
00:05:39,040 --> 00:05:45,190
an object of see since the syntax says<font color="#CCCCCC"> I</font>

96
00:05:42,880 --> 00:05:48,550
can invoke<font color="#CCCCCC"> C's member function without</font>

97
00:05:45,190 --> 00:05:50,919
using a qualifier<font color="#CCCCCC"> I should also be</font><font color="#E5E5E5"> able</font>

98
00:05:48,550 --> 00:05:53,919
<font color="#CCCCCC">to</font><font color="#E5E5E5"> invoke a non-member function that</font>

99
00:05:50,919 --> 00:05:58,330
operates on<font color="#E5E5E5"> C without using a qualifier</font>

100
00:05:53,919 --> 00:06:02,320
if that function<font color="#E5E5E5"> come from the same same</font>

101
00:05:58,330 --> 00:06:06,940
namespace<font color="#E5E5E5"> as C because both functions</font>

102
00:06:02,320 --> 00:06:10,380
<font color="#CCCCCC">belong</font><font color="#E5E5E5"> to the interface of C this is the</font>

103
00:06:06,940 --> 00:06:13,660
<font color="#E5E5E5">theoretical reason behind</font><font color="#CCCCCC"> Kanak</font><font color="#E5E5E5"> lookup</font>

104
00:06:10,380 --> 00:06:17,770
now suppose I am<font color="#E5E5E5"> a little suspicious</font>

105
00:06:13,660 --> 00:06:20,139
about this<font color="#E5E5E5"> principle</font><font color="#CCCCCC"> what will happen if</font>

106
00:06:17,770 --> 00:06:22,780
I<font color="#CCCCCC"> have a non-member function that</font><font color="#E5E5E5"> should</font>

107
00:06:20,139 --> 00:06:26,669
belong to<font color="#CCCCCC"> sis interface</font><font color="#E5E5E5"> but not in the</font>

108
00:06:22,780 --> 00:06:30,820
same<font color="#CCCCCC"> namespace as</font><font color="#E5E5E5"> C will it bite me</font>

109
00:06:26,669 --> 00:06:33,580
let's<font color="#E5E5E5"> look at example we have a</font>

110
00:06:30,820 --> 00:06:37,479
namespace<font color="#CCCCCC"> a and inside a we have a Class</font>

111
00:06:33,580 --> 00:06:41,349
C<font color="#E5E5E5"> then we define our operator</font><font color="#CCCCCC"> path that</font>

112
00:06:37,479 --> 00:06:44,289
works<font color="#E5E5E5"> on C this operator really should</font>

113
00:06:41,350 --> 00:06:48,460
belong to the<font color="#E5E5E5"> interface of C but it is</font>

114
00:06:44,289 --> 00:06:51,479
not in the same namespace<font color="#E5E5E5"> as seen in the</font>

115
00:06:48,460 --> 00:06:54,340
main function<font color="#CCCCCC"> I create an array of</font><font color="#E5E5E5"> C and</font>

116
00:06:51,479 --> 00:06:59,258
then call the<font color="#E5E5E5"> standard library function</font>

117
00:06:54,340 --> 00:07:02,669
accumulate on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> array and here is the</font>

118
00:06:59,259 --> 00:07:05,680
<font color="#CCCCCC">definition of the function accumulate</font>

119
00:07:02,669 --> 00:07:08,370
you can ignore most of the function

120
00:07:05,680 --> 00:07:12,669
what's important to us is the<font color="#E5E5E5"> cumulative</font>

121
00:07:08,370 --> 00:07:14,789
<font color="#CCCCCC">longs to name space stood and the</font>

122
00:07:12,669 --> 00:07:19,120
community function will invoke the

123
00:07:14,789 --> 00:07:21,690
<font color="#E5E5E5">operator</font><font color="#CCCCCC"> price since</font><font color="#E5E5E5"> we've already</font>

124
00:07:19,120 --> 00:07:24,750
defined<font color="#E5E5E5"> an operator</font><font color="#CCCCCC"> price for see</font>

125
00:07:21,690 --> 00:07:27,639
apparently<font color="#CCCCCC"> this is what we want to use</font>

126
00:07:24,750 --> 00:07:30,669
<font color="#CCCCCC">now the question is when the compiler</font>

127
00:07:27,639 --> 00:07:35,139
see the operator<font color="#CCCCCC"> press can it find our</font>

128
00:07:30,669 --> 00:07:38,830
operator<font color="#E5E5E5"> plus successfully the answer is</font>

129
00:07:35,139 --> 00:07:42,639
probably not it depends<font color="#CCCCCC"> on what header</font>

130
00:07:38,830 --> 00:07:45,639
files that you<font color="#CCCCCC"> have included remember</font>

131
00:07:42,639 --> 00:07:48,250
the name hiding<font color="#E5E5E5"> law when the compiler</font>

132
00:07:45,639 --> 00:07:50,830
<font color="#CCCCCC">sees the operator</font><font color="#E5E5E5"> plus it will first</font>

133
00:07:48,250 --> 00:07:54,280
search<font color="#E5E5E5"> an operator plus in the current</font>

134
00:07:50,830 --> 00:07:58,050
scope and if it cannot<font color="#E5E5E5"> find one it will</font>

135
00:07:54,280 --> 00:08:01,299
<font color="#E5E5E5">go to the global scope and</font><font color="#CCCCCC"> search for</font><font color="#E5E5E5"> it</font>

136
00:07:58,050 --> 00:08:03,659
however if the compiler<font color="#E5E5E5"> did find an</font>

137
00:08:01,300 --> 00:08:06,460
operator plus in current scope

138
00:08:03,659 --> 00:08:09,190
<font color="#E5E5E5">regardless of the types of parameter</font>

139
00:08:06,460 --> 00:08:13,388
that<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> is taking it will stop</font>

140
00:08:09,190 --> 00:08:15,340
searching<font color="#E5E5E5"> that is really bad because</font>

141
00:08:13,389 --> 00:08:17,919
there are a bunch of operator<font color="#CCCCCC"> press</font>

142
00:08:15,340 --> 00:08:21,789
that's defined<font color="#CCCCCC"> in the namespace student</font>

143
00:08:17,919 --> 00:08:24,490
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you could easily include some header</font>

144
00:08:21,789 --> 00:08:28,360
file<font color="#E5E5E5"> and our own operator press is</font>

145
00:08:24,490 --> 00:08:32,469
hidden so<font color="#E5E5E5"> you see this could indeed</font>

146
00:08:28,360 --> 00:08:36,130
fight me and<font color="#E5E5E5"> the solution is follow the</font>

147
00:08:32,469 --> 00:08:40,390
principle and put that operator<font color="#E5E5E5"> plus in</font>

148
00:08:36,130 --> 00:08:42,969
the same namespace<font color="#E5E5E5"> as C now the compiler</font>

149
00:08:40,390 --> 00:08:47,290
<font color="#E5E5E5">will be able to see our operator</font><font color="#CCCCCC"> press</font>

150
00:08:42,969 --> 00:08:49,570
because<font color="#CCCCCC"> of the cane o'clock up this is</font>

151
00:08:47,290 --> 00:08:53,920
why we should remember<font color="#E5E5E5"> the principle and</font>

152
00:08:49,570 --> 00:08:56,350
apply<font color="#E5E5E5"> them during our daily coding thank</font>

153
00:08:53,920 --> 00:08:58,329
you for<font color="#E5E5E5"> watching subscribe to</font><font color="#CCCCCC"> my channel</font>

154
00:08:56,350 --> 00:09:01,000
so you<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> updated when I post a new</font>

155
00:08:58,329 --> 00:09:03,969
<font color="#E5E5E5">video or you can go to my channels home</font>

156
00:09:01,000 --> 00:09:08,070
<font color="#E5E5E5">page and click on playlists to see other</font>

157
00:09:03,970 --> 00:09:08,070
<font color="#CCCCCC">videos that are more</font><font color="#E5E5E5"> free bye bye</font>

