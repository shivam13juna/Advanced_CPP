1
00:00:06,770 --> 00:00:11,809
hello everyone welcome<font color="#CCCCCC"> back in last</font>

2
00:00:09,830 --> 00:00:14,900
session we've talked<font color="#CCCCCC"> about the public</font>

3
00:00:11,809 --> 00:00:17,330
<font color="#E5E5E5">inheritance indicator is a relationship</font>

4
00:00:14,900 --> 00:00:18,200
<font color="#E5E5E5">between the base class and the derived</font>

5
00:00:17,330 --> 00:00:20,778
class

6
00:00:18,200 --> 00:00:23,029
so the derived class should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font>

7
00:00:20,779 --> 00:00:25,790
do everything<font color="#E5E5E5"> the base class can do</font>

8
00:00:23,029 --> 00:00:28,640
although the derived class can do those

9
00:00:25,790 --> 00:00:31,119
things<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> it has to</font>

10
00:00:28,640 --> 00:00:34,510
<font color="#E5E5E5">offer some way to do these things to</font>

11
00:00:31,119 --> 00:00:37,820
<font color="#CCCCCC">maintain that is a relation</font>

12
00:00:34,510 --> 00:00:40,489
however in<font color="#E5E5E5"> real-world programming</font>

13
00:00:37,820 --> 00:00:43,760
<font color="#CCCCCC">sometimes it is not</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> easy to maintain</font>

14
00:00:40,489 --> 00:00:46,459
<font color="#E5E5E5">the easier relation for example</font><font color="#CCCCCC"> we have</font>

15
00:00:43,760 --> 00:00:49,300
a class bird<font color="#E5E5E5"> and we have another class</font>

16
00:00:46,460 --> 00:00:53,690
penguin which is derived from bird and

17
00:00:49,300 --> 00:00:59,260
we know<font color="#E5E5E5"> a bird can fly</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> the class</font>

18
00:00:53,690 --> 00:01:03,909
bird<font color="#CCCCCC"> I can define</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> function called fly</font>

19
00:00:59,260 --> 00:01:11,390
and in some application code I can

20
00:01:03,909 --> 00:01:14,360
<font color="#CCCCCC">create a penguin and penguin can invoke</font>

21
00:01:11,390 --> 00:01:18,170
<font color="#CCCCCC">the function</font><font color="#E5E5E5"> fry because it's inherited</font>

22
00:01:14,360 --> 00:01:22,880
<font color="#E5E5E5">from bird now</font><font color="#CCCCCC"> suddenly we are making the</font>

23
00:01:18,170 --> 00:01:25,969
penguin fly<font color="#E5E5E5"> so what is wrong here we</font><font color="#CCCCCC"> are</font>

24
00:01:22,880 --> 00:01:31,100
the victim of<font color="#E5E5E5"> a imprecise language</font>

25
00:01:25,969 --> 00:01:33,589
English when<font color="#E5E5E5"> we say bird can fly we are</font>

26
00:01:31,100 --> 00:01:36,320
not saying all birds can fly there are

27
00:01:33,590 --> 00:01:40,399
certain birds<font color="#E5E5E5"> that cannot fly like</font>

28
00:01:36,320 --> 00:01:43,398
penguin so the right way<font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> is we</font>

29
00:01:40,399 --> 00:01:50,479
need<font color="#E5E5E5"> to define a</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> class called</font><font color="#CCCCCC"> the</font>

30
00:01:43,399 --> 00:01:54,369
flyable<font color="#E5E5E5"> bird which</font><font color="#CCCCCC"> is derived derived</font>

31
00:01:50,479 --> 00:01:54,369
from bird

32
00:01:56,720 --> 00:02:10,039
and the fly function<font color="#E5E5E5"> certainly should</font>

33
00:02:04,330 --> 00:02:13,280
belong to the<font color="#CCCCCC"> flyable bird</font><font color="#E5E5E5"> and now the</font>

34
00:02:10,039 --> 00:02:17,420
penguin is derived from bird and it

35
00:02:13,280 --> 00:02:20,360
doesn't have<font color="#CCCCCC"> to be able to fly so as you</font>

36
00:02:17,420 --> 00:02:23,179
<font color="#CCCCCC">sing and there are subtle things that</font>

37
00:02:20,360 --> 00:02:27,320
<font color="#CCCCCC">need to be taking taken care of</font><font color="#E5E5E5"> to</font>

38
00:02:23,180 --> 00:02:30,230
<font color="#CCCCCC">maintain</font><font color="#E5E5E5"> a is a relationship now let's</font>

39
00:02:27,320 --> 00:02:33,980
look at the second<font color="#CCCCCC"> example we have a</font>

40
00:02:30,230 --> 00:02:37,250
<font color="#CCCCCC">cast dog and the dog</font><font color="#E5E5E5"> can bark I'm just a</font>

41
00:02:33,980 --> 00:02:41,179
dog<font color="#E5E5E5"> and a yellow dog is derived from dog</font>

42
00:02:37,250 --> 00:02:44,050
and it<font color="#E5E5E5"> box I'm a yellow dog and in the</font>

43
00:02:41,180 --> 00:02:48,020
main function<font color="#CCCCCC"> I create</font><font color="#E5E5E5"> a yellow dog and</font>

44
00:02:44,050 --> 00:02:50,180
let it back<font color="#E5E5E5"> and then I assign yellow</font>

45
00:02:48,020 --> 00:02:54,260
dogs pointer to a<font color="#E5E5E5"> duck's pointer and</font>

46
00:02:50,180 --> 00:02:58,580
added<font color="#E5E5E5"> a bug again the output of this</font>

47
00:02:54,260 --> 00:03:02,049
<font color="#CCCCCC">program is the dog first bug I'm a</font>

48
00:02:58,580 --> 00:03:04,610
yellow dog<font color="#E5E5E5"> then it barked</font><font color="#CCCCCC"> I'm just a dog</font>

49
00:03:02,050 --> 00:03:07,459
so the same dog<font color="#E5E5E5"> calling the same</font>

50
00:03:04,610 --> 00:03:09,730
function resulted<font color="#E5E5E5"> in different behavior</font>

51
00:03:07,459 --> 00:03:12,739
<font color="#E5E5E5">this is not good</font>

52
00:03:09,730 --> 00:03:15,410
now some people may say this<font color="#CCCCCC"> is a</font>

53
00:03:12,739 --> 00:03:19,270
polymorphism<font color="#E5E5E5"> you have a problem</font><font color="#CCCCCC"> with</font>

54
00:03:15,410 --> 00:03:23,150
polymorphism a<font color="#E5E5E5"> polymorphism means</font>

55
00:03:19,270 --> 00:03:28,130
different classes of objects<font color="#E5E5E5"> react to</font>

56
00:03:23,150 --> 00:03:31,040
the same<font color="#CCCCCC"> API will behave differently so</font>

57
00:03:28,130 --> 00:03:35,180
the key words<font color="#E5E5E5"> there is different object</font>

58
00:03:31,040 --> 00:03:38,269
<font color="#CCCCCC">react</font><font color="#E5E5E5"> to same API</font><font color="#CCCCCC"> behave</font><font color="#E5E5E5"> differently and</font>

59
00:03:35,180 --> 00:03:42,260
in this case we have the<font color="#E5E5E5"> same object</font>

60
00:03:38,269 --> 00:03:45,890
react to the same API<font color="#E5E5E5"> and is behave</font>

61
00:03:42,260 --> 00:03:49,670
<font color="#E5E5E5">differently so this is not polymorphism</font>

62
00:03:45,890 --> 00:03:52,940
this is n type polymorphism<font color="#E5E5E5"> so as much</font>

63
00:03:49,670 --> 00:03:55,609
as<font color="#CCCCCC"> we need a lawyer</font><font color="#E5E5E5"> honest the dog we</font>

64
00:03:52,940 --> 00:03:59,840
<font color="#E5E5E5">need the object with consistent</font><font color="#CCCCCC"> behavior</font>

65
00:03:55,610 --> 00:04:02,989
in C++<font color="#CCCCCC"> so the conclusion we get from</font>

66
00:03:59,840 --> 00:04:07,010
this example is never over never over

67
00:04:02,989 --> 00:04:08,990
<font color="#E5E5E5">right non virtual functions if it as a</font>

68
00:04:07,010 --> 00:04:10,099
function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you really want to</font>

69
00:04:08,990 --> 00:04:13,459
override

70
00:04:10,099 --> 00:04:16,279
make that function virtual let's look at

71
00:04:13,459 --> 00:04:18,798
a<font color="#E5E5E5"> different example we've learned the</font>

72
00:04:16,279 --> 00:04:21,228
lesson<font color="#CCCCCC"> we'll only over light</font>

73
00:04:18,798 --> 00:04:24,799
virtual function<font color="#E5E5E5"> so the dog</font><font color="#CCCCCC"> has a</font>

74
00:04:21,228 --> 00:04:28,699
<font color="#E5E5E5">virtual function bug</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> default</font>

75
00:04:24,800 --> 00:04:31,160
<font color="#CCCCCC">value for message is just a</font><font color="#E5E5E5"> a yellow dog</font>

76
00:04:28,699 --> 00:04:33,680
derived<font color="#E5E5E5"> on from dog and have a virtual</font>

77
00:04:31,160 --> 00:04:37,430
<font color="#CCCCCC">function bug with</font><font color="#E5E5E5"> the default value of</font>

78
00:04:33,680 --> 00:04:40,190
message<font color="#E5E5E5"> a yellow in the main function</font>

79
00:04:37,430 --> 00:04:42,889
<font color="#E5E5E5">I'm doing the exact same thing as</font>

80
00:04:40,190 --> 00:04:45,919
previous example I create a yellow dog

81
00:04:42,889 --> 00:04:49,880
and let it<font color="#E5E5E5"> bug and assign to a dog's</font>

82
00:04:45,919 --> 00:04:54,289
pointer<font color="#E5E5E5"> and let it back again what's the</font>

83
00:04:49,880 --> 00:04:57,710
output<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> program the output</font><font color="#CCCCCC"> is</font>

84
00:04:54,289 --> 00:05:00,259
also exactly<font color="#CCCCCC"> the same as before it will</font>

85
00:04:57,710 --> 00:05:03,770
first bug on my yellow dog and then<font color="#E5E5E5"> bug</font>

86
00:05:00,259 --> 00:05:08,389
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> just a bug so this is a cunning dog</font>

87
00:05:03,770 --> 00:05:10,880
indeed what is happening now we know

88
00:05:08,389 --> 00:05:14,479
that<font color="#CCCCCC"> virtual function is bound at long</font>

89
00:05:10,880 --> 00:05:17,780
time<font color="#E5E5E5"> however the</font><font color="#CCCCCC"> default value for</font>

90
00:05:14,479 --> 00:05:18,440
<font color="#E5E5E5">function parameter is bound at compile</font>

91
00:05:17,780 --> 00:05:23,508
time

92
00:05:18,440 --> 00:05:26,210
so when<font color="#CCCCCC"> PG box it will invoke the</font>

93
00:05:23,509 --> 00:05:30,349
virtual function of yellow dog as we

94
00:05:26,210 --> 00:05:33,799
expected but it will pick<font color="#CCCCCC"> up</font><font color="#E5E5E5"> the default</font>

95
00:05:30,349 --> 00:05:39,349
<font color="#E5E5E5">value</font><font color="#CCCCCC"> of a message from dogs park</font>

96
00:05:33,800 --> 00:05:43,190
function that is why the PG box<font color="#E5E5E5"> I'm just</font>

97
00:05:39,349 --> 00:05:46,400
a dog so the lesson we can take<font color="#E5E5E5"> from</font>

98
00:05:43,190 --> 00:05:48,770
this example is never override the

99
00:05:46,400 --> 00:05:52,820
default parameter value for virtual

100
00:05:48,770 --> 00:05:58,039
function now suppose we<font color="#E5E5E5"> have the dog has</font>

101
00:05:52,820 --> 00:06:03,380
a different function bark<font color="#E5E5E5"> which takes a</font>

102
00:05:58,039 --> 00:06:08,120
different<font color="#CCCCCC"> primer parameter age and it</font>

103
00:06:03,380 --> 00:06:16,630
prints out I am

104
00:06:08,120 --> 00:06:16,630
age yes<font color="#E5E5E5"> Oh</font>

105
00:06:20,889 --> 00:06:32,320
now<font color="#E5E5E5"> on the main function I will</font><font color="#CCCCCC"> bark</font>

106
00:06:25,720 --> 00:06:33,820
with<font color="#CCCCCC"> H 5 and let's remove the PD and</font>

107
00:06:32,320 --> 00:06:38,950
<font color="#CCCCCC">park</font>

108
00:06:33,820 --> 00:06:41,540
now when the py<font color="#E5E5E5"> park with parameter 5</font>

109
00:06:38,950 --> 00:06:44,900
since yellow duck<font color="#CCCCCC"> doesn't have a bug</font>

110
00:06:41,540 --> 00:06:48,200
<font color="#E5E5E5">function with the integer parameter it</font>

111
00:06:44,900 --> 00:06:53,539
should invoke the dogs bark with integer

112
00:06:48,200 --> 00:06:58,400
right<font color="#E5E5E5"> the answer is no this code won't</font>

113
00:06:53,540 --> 00:07:01,760
even compile the reason is when the

114
00:06:58,400 --> 00:07:05,000
compiler<font color="#CCCCCC"> see the bark function</font><font color="#E5E5E5"> duel</font>

115
00:07:01,760 --> 00:07:08,180
<font color="#E5E5E5">first search</font><font color="#CCCCCC"> P</font><font color="#E5E5E5"> wise own class for a</font>

116
00:07:05,000 --> 00:07:10,340
function with the name<font color="#E5E5E5"> buck in this case</font>

117
00:07:08,180 --> 00:07:13,639
it was search pop function inside the

118
00:07:10,340 --> 00:07:16,849
<font color="#CCCCCC">yellow dog</font><font color="#E5E5E5"> if the compiler cannot find</font>

119
00:07:13,639 --> 00:07:22,040
the<font color="#CCCCCC"> a bark function</font><font color="#E5E5E5"> it will continue</font>

120
00:07:16,850 --> 00:07:25,070
searching in<font color="#CCCCCC"> dogs class</font><font color="#E5E5E5"> however if the</font>

121
00:07:22,040 --> 00:07:27,979
compiler did find a park function inside

122
00:07:25,070 --> 00:07:31,460
<font color="#CCCCCC">the yellow</font><font color="#E5E5E5"> dog regardless</font><font color="#CCCCCC"> of the</font>

123
00:07:27,979 --> 00:07:35,240
parameter<font color="#E5E5E5"> and return value type it will</font>

124
00:07:31,460 --> 00:07:38,270
stop searching<font color="#CCCCCC"> right there as a result</font>

125
00:07:35,240 --> 00:07:41,450
this bug function is the<font color="#E5E5E5"> only bug</font>

126
00:07:38,270 --> 00:07:44,590
function that the compiler can see so

127
00:07:41,450 --> 00:07:46,760
the two bug functions of dog are not

128
00:07:44,590 --> 00:07:49,789
inherited<font color="#E5E5E5"> by yellow dog</font>

129
00:07:46,760 --> 00:07:53,270
they are shadowed by yellow<font color="#CCCCCC"> dots</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> park</font>

130
00:07:49,789 --> 00:07:56,479
function this is<font color="#E5E5E5"> not good because the</font>

131
00:07:53,270 --> 00:07:59,419
easier relationship is broken<font color="#E5E5E5"> the dog</font>

132
00:07:56,479 --> 00:08:03,530
can bark with the integer but the<font color="#E5E5E5"> yellow</font>

133
00:07:59,419 --> 00:08:06,500
dog cannot park with the integer to

134
00:08:03,530 --> 00:08:12,820
maintain the is a relationship<font color="#E5E5E5"> one thing</font>

135
00:08:06,500 --> 00:08:15,820
we could do is<font color="#E5E5E5"> and declare using dog</font>

136
00:08:12,820 --> 00:08:15,820
<font color="#E5E5E5">bark</font>

137
00:08:15,969 --> 00:08:22,739
this will again bring<font color="#E5E5E5"> the dark spark</font>

138
00:08:19,329 --> 00:08:29,349
function<font color="#E5E5E5"> back to yellow ducks scope and</font>

139
00:08:22,739 --> 00:08:31,628
the<font color="#E5E5E5"> dis code will compile in summary to</font>

140
00:08:29,349 --> 00:08:33,789
maintain<font color="#E5E5E5"> the is a relationship between</font>

141
00:08:31,629 --> 00:08:36,069
the base class and the derived class

142
00:08:33,789 --> 00:08:38,948
<font color="#CCCCCC">there are four</font><font color="#E5E5E5"> things that we need to</font>

143
00:08:36,068 --> 00:08:41,649
<font color="#E5E5E5">pay attention to</font><font color="#CCCCCC"> number one precise</font>

144
00:08:38,948 --> 00:08:44,910
definition of the classes number<font color="#E5E5E5"> two</font>

145
00:08:41,649 --> 00:08:48,339
<font color="#E5E5E5">don't override non virtual functions</font>

146
00:08:44,910 --> 00:08:50,910
number three don't override<font color="#E5E5E5"> default</font>

147
00:08:48,339 --> 00:08:54,939
parameter values for virtual functions

148
00:08:50,910 --> 00:08:58,000
<font color="#E5E5E5">last one</font><font color="#CCCCCC"> false inheritance</font><font color="#E5E5E5"> of a set of</font>

149
00:08:54,939 --> 00:08:59,920
the shadowed functions that's all for

150
00:08:58,000 --> 00:09:02,399
today's session<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> for watching</font>

151
00:08:59,920 --> 00:09:02,399
<font color="#CCCCCC">bye bye</font>

