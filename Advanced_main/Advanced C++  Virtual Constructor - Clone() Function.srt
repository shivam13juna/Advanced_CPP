1
00:00:03,439 --> 00:00:09,269
hello everyone last time we have talked

2
00:00:06,809 --> 00:00:11,549
about using<font color="#E5E5E5"> a</font><font color="#CCCCCC"> chrome function to replace</font>

3
00:00:09,269 --> 00:00:14,849
copy constructor<font color="#E5E5E5"> and copy assignment</font>

4
00:00:11,549 --> 00:00:18,539
operator<font color="#CCCCCC"> so that object</font><font color="#E5E5E5"> copying can only</font>

5
00:00:14,849 --> 00:00:21,210
have<font color="#E5E5E5"> been explicitly today</font><font color="#CCCCCC"> we'll talk</font>

6
00:00:18,539 --> 00:00:25,020
<font color="#E5E5E5">about</font><font color="#CCCCCC"> another advantage of</font><font color="#E5E5E5"> using chrome</font>

7
00:00:21,210 --> 00:00:27,840
function let's look<font color="#E5E5E5"> at an example</font><font color="#CCCCCC"> we</font>

8
00:00:25,020 --> 00:00:30,810
have<font color="#CCCCCC"> a car</font><font color="#E5E5E5"> stock and</font><font color="#CCCCCC"> the yellow dog is</font>

9
00:00:27,840 --> 00:00:34,200
derived from dark in the main<font color="#CCCCCC"> function</font>

10
00:00:30,810 --> 00:00:36,360
we<font color="#CCCCCC"> have a yellow dot e and then</font><font color="#E5E5E5"> we call</font>

11
00:00:34,200 --> 00:00:41,340
the function foo<font color="#E5E5E5"> with the yellow double</font>

12
00:00:36,360 --> 00:00:43,890
<font color="#CCCCCC">D the function foo takes</font><font color="#E5E5E5"> a dog's pointer</font>

13
00:00:41,340 --> 00:00:47,460
as parameter and the inside the function

14
00:00:43,890 --> 00:00:51,090
<font color="#CCCCCC">we create a dog</font><font color="#E5E5E5"> C which is copy</font>

15
00:00:47,460 --> 00:00:56,880
constructed from<font color="#E5E5E5"> D do you see any</font>

16
00:00:51,090 --> 00:00:59,910
problem<font color="#CCCCCC"> with this code we know that D is</font>

17
00:00:56,880 --> 00:01:04,469
a yellow<font color="#CCCCCC"> duck so what the function foo</font>

18
00:00:59,910 --> 00:01:07,380
<font color="#E5E5E5">get is really a yellow duck but when you</font>

19
00:01:04,468 --> 00:01:11,548
a copy construct<font color="#E5E5E5"> C we</font><font color="#CCCCCC"> are copy</font>

20
00:01:07,380 --> 00:01:25,310
constructing a dog so as a result<font color="#CCCCCC"> of</font>

21
00:01:11,549 --> 00:01:25,310
<font color="#E5E5E5">that D is a yellow dog and C is a dog</font>

22
00:01:27,830 --> 00:01:36,480
so<font color="#CCCCCC"> see is not really at identical</font><font color="#E5E5E5"> copy</font>

23
00:01:31,950 --> 00:01:39,450
of<font color="#CCCCCC"> T this</font><font color="#E5E5E5"> is not good because a copy is</font>

24
00:01:36,480 --> 00:01:43,950
a copy<font color="#E5E5E5"> if it is not</font><font color="#CCCCCC"> identical to its</font>

25
00:01:39,450 --> 00:01:46,560
original<font color="#E5E5E5"> how can you call it a copy to</font>

26
00:01:43,950 --> 00:01:54,350
solve this problem<font color="#CCCCCC"> we can use again</font><font color="#E5E5E5"> a</font>

27
00:01:46,560 --> 00:02:00,090
<font color="#E5E5E5">clone function we define a public</font>

28
00:01:54,350 --> 00:02:06,089
virtual clone function and this function

29
00:02:00,090 --> 00:02:12,780
will<font color="#CCCCCC"> return</font><font color="#E5E5E5"> a dog which is copy</font>

30
00:02:06,090 --> 00:02:16,320
constructed<font color="#E5E5E5"> from itself and the yellow</font>

31
00:02:12,780 --> 00:02:20,430
<font color="#E5E5E5">dog</font><font color="#CCCCCC"> also have a comb function</font><font color="#E5E5E5"> but they</font>

32
00:02:16,320 --> 00:02:22,880
told it<font color="#E5E5E5"> turn a yellow dog instead</font><font color="#CCCCCC"> of</font>

33
00:02:20,430 --> 00:02:22,880
<font color="#E5E5E5">dark</font>

34
00:02:29,760 --> 00:02:35,879
and in the full function<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

35
00:02:33,150 --> 00:02:40,310
<font color="#CCCCCC">cutting the copy constructor directly</font>

36
00:02:35,879 --> 00:02:40,310
<font color="#E5E5E5">will call the clone function</font>

37
00:02:44,730 --> 00:02:52,609
and now<font color="#E5E5E5"> see is indeed a yellow</font><font color="#CCCCCC"> dock</font>

38
00:02:54,590 --> 00:03:00,960
so in a sense<font color="#E5E5E5"> the chrome function is</font>

39
00:02:57,720 --> 00:03:03,750
like a virtual constructor it makes sure

40
00:03:00,960 --> 00:03:06,660
the appropriate<font color="#CCCCCC"> type of object will be</font>

41
00:03:03,750 --> 00:03:11,510
constructed no matter what kind<font color="#E5E5E5"> of pipe</font>

42
00:03:06,660 --> 00:03:11,510
<font color="#E5E5E5">the original object has been casted into</font>

43
00:03:11,690 --> 00:03:17,880
one thing<font color="#E5E5E5"> to note is this</font><font color="#CCCCCC"> clone function</font>

44
00:03:15,000 --> 00:03:20,070
returns a<font color="#CCCCCC"> tox pointer</font><font color="#E5E5E5"> and that this</font>

45
00:03:17,880 --> 00:03:23,250
chrome function returns<font color="#CCCCCC"> a yellow</font><font color="#E5E5E5"> ducks</font>

46
00:03:20,070 --> 00:03:26,880
pointer<font color="#E5E5E5"> even though one function is the</font>

47
00:03:23,250 --> 00:03:33,260
<font color="#CCCCCC">overridden function</font><font color="#E5E5E5"> of the other this is</font>

48
00:03:26,880 --> 00:03:39,240
<font color="#E5E5E5">an important feature called covariant</font>

49
00:03:33,260 --> 00:03:41,700
return type<font color="#E5E5E5"> it allows an overridden</font>

50
00:03:39,240 --> 00:03:44,670
virtual function in this<font color="#CCCCCC"> case the</font><font color="#E5E5E5"> clone</font>

51
00:03:41,700 --> 00:03:48,119
function to have a different return<font color="#E5E5E5"> type</font>

52
00:03:44,670 --> 00:03:51,359
as long as<font color="#CCCCCC"> its return type is derived</font>

53
00:03:48,120 --> 00:03:55,440
<font color="#CCCCCC">from the base class functions</font><font color="#E5E5E5"> return</font>

54
00:03:51,360 --> 00:03:58,050
type so this is the important occipital

55
00:03:55,440 --> 00:04:03,240
class language feature that makes<font color="#E5E5E5"> the</font>

56
00:03:58,050 --> 00:04:05,190
virtual constructor possible thank you

57
00:04:03,240 --> 00:04:07,020
for watching feel free to<font color="#CCCCCC"> subscribe to</font>

58
00:04:05,190 --> 00:04:10,880
<font color="#CCCCCC">my channel and</font><font color="#E5E5E5"> check</font><font color="#CCCCCC"> out the other</font>

59
00:04:07,020 --> 00:04:10,880
videos I<font color="#CCCCCC"> have</font><font color="#E5E5E5"> see you next time</font>

