1
00:00:07,260 --> 00:00:14,170
hello welcome<font color="#E5E5E5"> to the first</font><font color="#CCCCCC"> session</font><font color="#E5E5E5"> of</font>

2
00:00:10,690 --> 00:00:16,509
C++ advanced today<font color="#E5E5E5"> we are going to talk</font>

3
00:00:14,170 --> 00:00:19,930
<font color="#E5E5E5">about four functions that could be</font>

4
00:00:16,509 --> 00:00:23,439
<font color="#CCCCCC">generated by</font><font color="#E5E5E5"> compiler</font><font color="#CCCCCC"> if you don't</font>

5
00:00:19,930 --> 00:00:26,160
declare them by yourself<font color="#CCCCCC"> the copy</font>

6
00:00:23,439 --> 00:00:30,340
constructor<font color="#E5E5E5"> copy assignment operator</font>

7
00:00:26,160 --> 00:00:32,259
destructor default constructor<font color="#E5E5E5"> there's a</font>

8
00:00:30,340 --> 00:00:35,890
additional rule about<font color="#CCCCCC"> the default</font>

9
00:00:32,259 --> 00:00:38,339
<font color="#E5E5E5">constructor which is</font><font color="#CCCCCC"> edible generate</font>

10
00:00:35,890 --> 00:00:42,670
will be generated<font color="#CCCCCC"> only if there is no</font>

11
00:00:38,339 --> 00:00:46,379
<font color="#E5E5E5">constructor declared at all suppose I</font>

12
00:00:42,670 --> 00:00:49,870
write a class dog with empty definition

13
00:00:46,379 --> 00:00:55,869
the class<font color="#E5E5E5"> dog is equivalent</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> a class</font>

14
00:00:49,870 --> 00:00:58,959
like this<font color="#E5E5E5"> the compiler will fearing the</font>

15
00:00:55,869 --> 00:01:04,089
<font color="#E5E5E5">four functions</font><font color="#CCCCCC"> for me since I don't</font><font color="#E5E5E5"> have</font>

16
00:00:58,960 --> 00:01:07,689
them defined copy constructor copy

17
00:01:04,089 --> 00:01:13,780
assignment operator default constructor

18
00:01:07,689 --> 00:01:16,419
and the destructor now you may imagine

19
00:01:13,780 --> 00:01:20,070
<font color="#E5E5E5">that the compiler generated functions</font>

20
00:01:16,420 --> 00:01:23,380
are emptied functions that doing nothing

21
00:01:20,070 --> 00:01:25,809
<font color="#CCCCCC">for this particular case they are doing</font>

22
00:01:23,380 --> 00:01:29,880
<font color="#CCCCCC">nothing because</font><font color="#E5E5E5"> the dark class is so</font>

23
00:01:25,810 --> 00:01:33,400
trivial<font color="#CCCCCC"> but for any real world class</font>

24
00:01:29,880 --> 00:01:35,580
there there will not be empty<font color="#CCCCCC"> they'll do</font>

25
00:01:33,400 --> 00:01:39,880
their jobs

26
00:01:35,580 --> 00:01:43,210
the copy constructor um<font color="#E5E5E5"> will do a member</font>

27
00:01:39,880 --> 00:01:45,759
by member initialization it will use the

28
00:01:43,210 --> 00:01:49,600
members from right<font color="#E5E5E5"> hand side dog to</font>

29
00:01:45,760 --> 00:01:53,770
<font color="#E5E5E5">initialize every member of its of</font><font color="#CCCCCC"> where</font>

30
00:01:49,600 --> 00:01:57,699
<font color="#E5E5E5">they stock the copy assignment operator</font>

31
00:01:53,770 --> 00:02:00,220
<font color="#E5E5E5">will do a member by member copying it</font>

32
00:01:57,700 --> 00:02:03,110
will copy the members from right<font color="#E5E5E5"> hand</font>

33
00:02:00,220 --> 00:02:07,460
<font color="#E5E5E5">start aside dog to the stock</font>

34
00:02:03,110 --> 00:02:10,789
the default constructor<font color="#CCCCCC"> will call base</font>

35
00:02:07,460 --> 00:02:15,170
classes default constructor and the data

36
00:02:10,789 --> 00:02:18,200
<font color="#E5E5E5">members default constructor</font><font color="#CCCCCC"> and that the</font>

37
00:02:15,170 --> 00:02:21,619
destructor is doing the opposite<font color="#E5E5E5"> it will</font>

38
00:02:18,200 --> 00:02:26,720
call<font color="#E5E5E5"> it base classes destructor and the</font>

39
00:02:21,620 --> 00:02:28,610
data members<font color="#E5E5E5"> destructor these are the</font>

40
00:02:26,720 --> 00:02:31,820
things that<font color="#E5E5E5"> the compiler generated</font>

41
00:02:28,610 --> 00:02:34,760
function will do now you may<font color="#E5E5E5"> want to ask</font>

42
00:02:31,820 --> 00:02:38,750
<font color="#E5E5E5">the question what if the compiler</font>

43
00:02:34,760 --> 00:02:42,140
<font color="#E5E5E5">generator function is unable to</font><font color="#CCCCCC"> do the</font>

44
00:02:38,750 --> 00:02:45,020
job they are<font color="#CCCCCC"> supposed to do for example</font>

45
00:02:42,140 --> 00:02:48,290
<font color="#E5E5E5">the copy assignment operator will do a</font>

46
00:02:45,020 --> 00:02:53,350
member by member copying what if one of

47
00:02:48,290 --> 00:02:56,390
<font color="#CCCCCC">the</font><font color="#E5E5E5"> members is a Const or reference</font>

48
00:02:53,350 --> 00:02:58,549
<font color="#E5E5E5">remember the</font><font color="#CCCCCC"> tungsten</font><font color="#E5E5E5"> reference they</font>

49
00:02:56,390 --> 00:03:01,970
cannot be copied<font color="#E5E5E5"> or</font><font color="#CCCCCC"> they can only be</font>

50
00:02:58,550 --> 00:03:05,600
<font color="#E5E5E5">initialized</font><font color="#CCCCCC"> then what</font><font color="#E5E5E5"> does the compiler</font>

51
00:03:01,970 --> 00:03:10,700
do the compiler will simply do not

52
00:03:05,600 --> 00:03:15,170
generate this function and similarly for

53
00:03:10,700 --> 00:03:17,480
<font color="#CCCCCC">a</font><font color="#E5E5E5"> default constructor it will call the</font>

54
00:03:15,170 --> 00:03:19,700
base<font color="#E5E5E5"> classes Dvorkin jump what whatever</font>

55
00:03:17,480 --> 00:03:23,660
<font color="#CCCCCC">the base class</font><font color="#E5E5E5"> doesn't have a default</font>

56
00:03:19,700 --> 00:03:27,530
constructor<font color="#E5E5E5"> then again this function</font>

57
00:03:23,660 --> 00:03:30,680
<font color="#CCCCCC">will be</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> generated</font><font color="#CCCCCC"> or destructor</font>

58
00:03:27,530 --> 00:03:32,690
<font color="#E5E5E5">or every class have a destructor so it</font>

59
00:03:30,680 --> 00:03:34,459
should have no problem called<font color="#E5E5E5"> the base</font>

60
00:03:32,690 --> 00:03:37,790
classes<font color="#CCCCCC"> each doctor enter the data</font>

61
00:03:34,459 --> 00:03:38,530
<font color="#E5E5E5">members destructor right well not</font>

62
00:03:37,790 --> 00:03:42,010
exactly

63
00:03:38,530 --> 00:03:46,520
<font color="#E5E5E5">what if the base</font><font color="#CCCCCC"> classes destructor is</font>

64
00:03:42,010 --> 00:03:49,790
<font color="#E5E5E5">not public it's a private district then</font>

65
00:03:46,520 --> 00:03:52,450
again this destructor cannot be

66
00:03:49,790 --> 00:03:52,450
<font color="#E5E5E5">generated</font>

67
00:03:52,650 --> 00:03:58,379
so the compiler generator functions

68
00:03:55,379 --> 00:04:01,140
sometimes<font color="#E5E5E5"> are</font><font color="#CCCCCC"> really handy to use</font><font color="#E5E5E5"> but</font>

69
00:03:58,379 --> 00:04:03,239
you<font color="#CCCCCC"> need to keep</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> things in mind if</font>

70
00:04:01,140 --> 00:04:08,129
you are<font color="#E5E5E5"> relying on the compiler to</font>

71
00:04:03,239 --> 00:04:10,620
<font color="#E5E5E5">generate</font><font color="#CCCCCC"> this function for you some</font>

72
00:04:08,129 --> 00:04:13,890
other<font color="#CCCCCC"> nodes are the compiler</font><font color="#E5E5E5"> general</font>

73
00:04:10,620 --> 00:04:16,978
functions<font color="#CCCCCC"> are public</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> inline they</font><font color="#E5E5E5"> are</font>

74
00:04:13,890 --> 00:04:19,949
generated<font color="#E5E5E5"> only</font><font color="#CCCCCC"> if they</font><font color="#E5E5E5"> are needed that</font>

75
00:04:16,978 --> 00:04:22,590
<font color="#E5E5E5">means if they are not used at all</font><font color="#CCCCCC"> in the</font>

76
00:04:19,949 --> 00:04:25,710
function<font color="#E5E5E5"> with other functions then they</font>

77
00:04:22,590 --> 00:04:29,030
will not<font color="#CCCCCC"> be</font><font color="#E5E5E5"> generated even if the</font>

78
00:04:25,710 --> 00:04:32,370
<font color="#E5E5E5">compiler is capable of generating them</font>

79
00:04:29,030 --> 00:04:37,049
now let's<font color="#E5E5E5"> look at a less trivial class</font>

80
00:04:32,370 --> 00:04:39,930
<font color="#CCCCCC">dog</font><font color="#E5E5E5"> the dog has a</font><font color="#CCCCCC"> M name which is the</font>

81
00:04:37,050 --> 00:04:42,810
name of<font color="#E5E5E5"> the dog</font><font color="#CCCCCC"> it is a stream and the</font>

82
00:04:39,930 --> 00:04:45,180
<font color="#CCCCCC">dogs constructor takes a name as the</font>

83
00:04:42,810 --> 00:04:49,680
parameter and the default name is Bob

84
00:04:45,180 --> 00:04:52,229
<font color="#E5E5E5">and the dog has a destructor in the main</font>

85
00:04:49,680 --> 00:04:55,410
<font color="#E5E5E5">function</font><font color="#CCCCCC"> I create a dog one with the</font>

86
00:04:52,229 --> 00:04:59,880
name Henry<font color="#E5E5E5"> and then I create</font><font color="#CCCCCC"> dok2 and</font>

87
00:04:55,410 --> 00:05:03,150
then assign doc<font color="#E5E5E5"> one to duck to</font><font color="#CCCCCC"> the</font>

88
00:04:59,880 --> 00:05:06,990
output of this simple program is Henry's

89
00:05:03,150 --> 00:05:10,138
bone<font color="#E5E5E5"> Bob is born Henry is destroyed</font><font color="#CCCCCC"> hell</font>

90
00:05:06,990 --> 00:05:12,479
<font color="#E5E5E5">is destroyed the reason</font><font color="#CCCCCC"> henry is</font>

91
00:05:10,139 --> 00:05:17,370
destroyed it twice is because duck<font color="#CCCCCC"> two</font>

92
00:05:12,479 --> 00:05:19,800
was created as<font color="#CCCCCC"> bob</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> destroyed as</font>

93
00:05:17,370 --> 00:05:20,630
hell because<font color="#CCCCCC"> dog 1 is assigned</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> duck</font>

94
00:05:19,800 --> 00:05:24,349
too

95
00:05:20,630 --> 00:05:27,060
now let's examine<font color="#E5E5E5"> what functions are</font>

96
00:05:24,349 --> 00:05:31,050
generated by compiler<font color="#E5E5E5"> in this particular</font>

97
00:05:27,060 --> 00:05:35,849
example if the<font color="#CCCCCC"> car Bay constructed</font>

98
00:05:31,050 --> 00:05:39,270
generated by compiler<font color="#E5E5E5"> no because the</font>

99
00:05:35,849 --> 00:05:41,930
copy constructor is<font color="#E5E5E5"> not used in</font><font color="#CCCCCC"> our main</font>

100
00:05:39,270 --> 00:05:44,460
function<font color="#CCCCCC"> so it will not be generated</font>

101
00:05:41,930 --> 00:05:46,190
it's a copy assignment operator

102
00:05:44,460 --> 00:05:49,979
generated by the compiler

103
00:05:46,190 --> 00:05:51,289
we used copy assignment operator<font color="#CCCCCC"> over</font>

104
00:05:49,979 --> 00:05:55,039
here

105
00:05:51,289 --> 00:06:00,169
and our dog<font color="#E5E5E5"> does not have a copy</font>

106
00:05:55,039 --> 00:06:01,969
assignment operator<font color="#E5E5E5"> defined so</font><font color="#CCCCCC"> that the</font>

107
00:06:00,169 --> 00:06:06,549
<font color="#E5E5E5">compiler will gladly generate that</font>

108
00:06:01,969 --> 00:06:11,089
function for us<font color="#E5E5E5"> and so it's yes</font>

109
00:06:06,550 --> 00:06:15,259
<font color="#E5E5E5">destructor the structure is always be</font>

110
00:06:11,089 --> 00:06:19,490
used but<font color="#E5E5E5"> a dog already have a destructor</font>

111
00:06:15,259 --> 00:06:24,199
defined so the answer<font color="#E5E5E5"> is no the compiler</font>

112
00:06:19,490 --> 00:06:28,009
no need to generate one<font color="#CCCCCC"> the default</font>

113
00:06:24,199 --> 00:06:33,919
constructor<font color="#E5E5E5"> the default constructor is</font>

114
00:06:28,009 --> 00:06:36,999
used<font color="#CCCCCC"> over here</font><font color="#E5E5E5"> and the dog already</font>

115
00:06:33,919 --> 00:06:39,889
<font color="#CCCCCC">defined a</font><font color="#E5E5E5"> default constructor</font><font color="#CCCCCC"> over here</font>

116
00:06:36,999 --> 00:06:42,439
now many people have the concept that

117
00:06:39,889 --> 00:06:45,740
the default constructor<font color="#E5E5E5"> is a constructor</font>

118
00:06:42,439 --> 00:06:48,289
that has no parameter that is<font color="#E5E5E5"> wrong</font>

119
00:06:45,740 --> 00:06:51,589
concept<font color="#E5E5E5"> a default constructor</font><font color="#CCCCCC"> is a</font>

120
00:06:48,289 --> 00:06:56,089
constructor<font color="#CCCCCC"> that can work without any</font>

121
00:06:51,589 --> 00:07:00,319
Queen<font color="#CCCCCC"> without any parameter so this is</font>

122
00:06:56,089 --> 00:07:02,779
our default<font color="#E5E5E5"> constructor so the answer</font><font color="#CCCCCC"> is</font>

123
00:07:00,319 --> 00:07:05,949
no because we already have a disjunct

124
00:07:02,779 --> 00:07:05,949
default constructor

125
00:07:06,249 --> 00:07:14,229
now suppose I change the<font color="#E5E5E5"> M name member</font>

126
00:07:10,460 --> 00:07:18,400
from a<font color="#E5E5E5"> string to a reference to a string</font>

127
00:07:14,229 --> 00:07:22,039
<font color="#E5E5E5">now what will</font><font color="#CCCCCC"> happen to this code</font>

128
00:07:18,400 --> 00:07:25,909
this<font color="#CCCCCC"> code will no longer compile</font><font color="#E5E5E5"> because</font>

129
00:07:22,039 --> 00:07:27,979
<font color="#E5E5E5">here we are using a copy assignment</font>

130
00:07:25,909 --> 00:07:30,498
operator<font color="#E5E5E5"> that's generated by compiler</font>

131
00:07:27,979 --> 00:07:33,020
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the compiler generated</font><font color="#E5E5E5"> copy</font>

132
00:07:30,499 --> 00:07:36,889
assignment operator<font color="#CCCCCC"> there's a member by</font>

133
00:07:33,020 --> 00:07:39,919
member copy since the dog has a member

134
00:07:36,889 --> 00:07:43,849
which<font color="#CCCCCC"> is a reference</font><font color="#E5E5E5"> this member cannot</font>

135
00:07:39,919 --> 00:07:46,729
be copied<font color="#E5E5E5"> so the compiler will not</font>

136
00:07:43,849 --> 00:07:49,839
generate this<font color="#E5E5E5"> operator for us this code</font>

137
00:07:46,729 --> 00:07:49,839
will not compile

138
00:07:52,060 --> 00:07:58,510
so another thing<font color="#E5E5E5"> about this example is</font>

139
00:07:54,820 --> 00:08:01,240
this kind<font color="#E5E5E5"> of class cannot</font><font color="#CCCCCC"> be used by</font>

140
00:07:58,510 --> 00:08:03,430
with the standard library container

141
00:08:01,240 --> 00:08:06,640
because standard library container

142
00:08:03,430 --> 00:08:10,240
requires the combined the<font color="#E5E5E5"> contain need</font>

143
00:08:06,640 --> 00:08:14,099
to be<font color="#E5E5E5"> copy</font><font color="#CCCCCC"> sign</font><font color="#E5E5E5"> label when the copy</font>

144
00:08:10,240 --> 00:08:17,740
<font color="#E5E5E5">constructible so this is our job make</font>

145
00:08:14,100 --> 00:08:22,090
now let's look<font color="#E5E5E5"> at our second example we</font>

146
00:08:17,740 --> 00:08:25,210
have<font color="#CCCCCC"> a new class color</font><font color="#E5E5E5"> and the dog have</font>

147
00:08:22,090 --> 00:08:28,780
the data member em cover which is<font color="#E5E5E5"> of</font>

148
00:08:25,210 --> 00:08:33,429
type<font color="#CCCCCC"> color</font><font color="#E5E5E5"> and in the main function I</font>

149
00:08:28,780 --> 00:08:37,089
create a<font color="#E5E5E5"> dot dot one what do you think</font>

150
00:08:33,429 --> 00:08:41,079
the output of this<font color="#E5E5E5"> program is you may</font>

151
00:08:37,090 --> 00:08:43,840
pause the<font color="#CCCCCC"> video and think about</font><font color="#E5E5E5"> it this</font>

152
00:08:41,080 --> 00:08:47,020
code will not<font color="#E5E5E5"> compile to give a</font><font color="#CCCCCC"> compiler</font>

153
00:08:43,840 --> 00:08:52,570
error that says no matching function for

154
00:08:47,020 --> 00:08:56,280
call to<font color="#CCCCCC"> dog dog how did this happen</font>

155
00:08:52,570 --> 00:09:01,510
whether this error<font color="#E5E5E5"> message</font><font color="#CCCCCC"> come</font><font color="#E5E5E5"> from</font>

156
00:08:56,280 --> 00:09:05,500
when I create<font color="#CCCCCC"> dog</font><font color="#E5E5E5"> one I'm calling the</font>

157
00:09:01,510 --> 00:09:07,810
<font color="#CCCCCC">tox</font><font color="#E5E5E5"> default constructor for dog</font><font color="#CCCCCC"> 1 and if</font>

158
00:09:05,500 --> 00:09:11,530
since my dog doesn't have a<font color="#E5E5E5"> default</font>

159
00:09:07,810 --> 00:09:16,410
constructor<font color="#E5E5E5"> the compiler will try</font><font color="#CCCCCC"> to</font>

160
00:09:11,530 --> 00:09:19,569
create a default<font color="#CCCCCC"> constructor</font><font color="#E5E5E5"> for me</font><font color="#CCCCCC"> and</font>

161
00:09:16,410 --> 00:09:22,089
we know<font color="#E5E5E5"> that the compiler generated a</font>

162
00:09:19,570 --> 00:09:25,360
default constructor<font color="#CCCCCC"> will call the data</font>

163
00:09:22,090 --> 00:09:29,820
members<font color="#CCCCCC"> default constructor in this case</font>

164
00:09:25,360 --> 00:09:32,980
we'll call em colors default constructor

165
00:09:29,820 --> 00:09:35,500
however the color doesn't<font color="#E5E5E5"> have a default</font>

166
00:09:32,980 --> 00:09:37,690
constructor<font color="#CCCCCC"> either so the compiler will</font>

167
00:09:35,500 --> 00:09:43,150
try to generate<font color="#CCCCCC"> the</font><font color="#E5E5E5"> default constructor</font>

168
00:09:37,690 --> 00:09:45,220
for color first since color<font color="#E5E5E5"> already have</font>

169
00:09:43,150 --> 00:09:48,579
a constructor that takes<font color="#E5E5E5"> a stream</font>

170
00:09:45,220 --> 00:09:51,370
parameter the compiler is not<font color="#E5E5E5"> able to</font>

171
00:09:48,580 --> 00:09:54,820
<font color="#E5E5E5">generate a default constructor for color</font>

172
00:09:51,370 --> 00:09:57,460
<font color="#CCCCCC">as a result the compiler is not able to</font>

173
00:09:54,820 --> 00:10:01,270
<font color="#CCCCCC">generate a default constructor</font><font color="#E5E5E5"> for dog</font>

174
00:09:57,460 --> 00:10:04,280
<font color="#E5E5E5">either that is why we got this message</font>

175
00:10:01,270 --> 00:10:07,130
no matching function<font color="#E5E5E5"> call</font><font color="#CCCCCC"> to</font>

176
00:10:04,280 --> 00:10:11,810
<font color="#E5E5E5">dogs default constructor and that the</font>

177
00:10:07,130 --> 00:10:15,530
candidates are detox<font color="#E5E5E5"> copy constructor we</font>

178
00:10:11,810 --> 00:10:17,989
know that copy constructor is that the

179
00:10:15,530 --> 00:10:27,020
second constructor that compiler

180
00:10:17,990 --> 00:10:29,930
generates so if if we remove the

181
00:10:27,020 --> 00:10:32,449
parameter from<font color="#E5E5E5"> four colors constructor</font>

182
00:10:29,930 --> 00:10:38,209
then this code will compile<font color="#E5E5E5"> and the</font>

183
00:10:32,450 --> 00:10:43,310
output will<font color="#CCCCCC"> be color is born now let's</font>

184
00:10:38,210 --> 00:10:49,160
add<font color="#CCCCCC"> a second data member for Doc it's</font><font color="#E5E5E5"> a</font>

185
00:10:43,310 --> 00:10:52,400
reference to stream if you remember from

186
00:10:49,160 --> 00:10:54,920
previous example<font color="#CCCCCC"> that a stream data</font>

187
00:10:52,400 --> 00:10:58,880
member a reference data member in the

188
00:10:54,920 --> 00:11:02,390
class will prevent the compiler<font color="#E5E5E5"> from</font>

189
00:10:58,880 --> 00:11:07,100
generating copy assignment operator for

190
00:11:02,390 --> 00:11:09,040
the class since<font color="#CCCCCC"> even in this example we</font>

191
00:11:07,100 --> 00:11:12,100
are<font color="#E5E5E5"> only using the default constructor</font>

192
00:11:09,040 --> 00:11:18,740
<font color="#CCCCCC">so we should be fine right</font>

193
00:11:12,100 --> 00:11:20,900
not exactly<font color="#CCCCCC"> the compiler generated a</font>

194
00:11:18,740 --> 00:11:23,930
default constructor will call the

195
00:11:20,900 --> 00:11:28,189
default<font color="#E5E5E5"> constructor for</font><font color="#CCCCCC"> the data member</font>

196
00:11:23,930 --> 00:11:31,250
of data members of the dog that<font color="#CCCCCC"> is good</font>

197
00:11:28,190 --> 00:11:34,880
<font color="#E5E5E5">however what the default constructor</font>

198
00:11:31,250 --> 00:11:37,760
doesn't do is to initialize<font color="#E5E5E5"> the data</font>

199
00:11:34,880 --> 00:11:41,510
members<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> dog so</font><font color="#E5E5E5"> in this case and</font>

200
00:11:37,760 --> 00:11:46,670
name is constructed<font color="#E5E5E5"> but not initialized</font>

201
00:11:41,510 --> 00:11:48,830
<font color="#CCCCCC">and we know that</font><font color="#E5E5E5"> c++ standard requires</font>

202
00:11:46,670 --> 00:11:52,819
that<font color="#E5E5E5"> all reference need to be</font>

203
00:11:48,830 --> 00:11:55,520
initialized<font color="#E5E5E5"> because reference cannot be</font>

204
00:11:52,820 --> 00:11:58,280
reassigned<font color="#E5E5E5"> so the only way to assign a</font>

205
00:11:55,520 --> 00:12:02,569
variable<font color="#E5E5E5"> reference is through</font>

206
00:11:58,280 --> 00:12:05,120
initialization<font color="#E5E5E5"> because</font><font color="#CCCCCC"> m name is not</font>

207
00:12:02,570 --> 00:12:10,640
initialized<font color="#CCCCCC"> so this code will not</font>

208
00:12:05,120 --> 00:12:11,990
<font color="#E5E5E5">compile finally there's a update in C++</font>

209
00:12:10,640 --> 00:12:14,960
<font color="#CCCCCC">11</font>

210
00:12:11,990 --> 00:12:18,950
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> C++ 11</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a new way to</font>

211
00:12:14,960 --> 00:12:24,500
define<font color="#E5E5E5"> the default constructor</font><font color="#CCCCCC"> it is</font>

212
00:12:18,950 --> 00:12:26,960
<font color="#CCCCCC">done by this this gives me a way</font><font color="#E5E5E5"> to use</font>

213
00:12:24,500 --> 00:12:29,990
the compiler generated default

214
00:12:26,960 --> 00:12:33,950
constructor<font color="#E5E5E5"> even though I have defined</font>

215
00:12:29,990 --> 00:12:38,839
other constructors<font color="#E5E5E5"> already so this</font>

216
00:12:33,950 --> 00:12:40,790
<font color="#E5E5E5">should</font><font color="#CCCCCC"> be a</font><font color="#E5E5E5"> very handy feature that's</font>

217
00:12:38,839 --> 00:12:42,800
all for today's class<font color="#CCCCCC"> thank you for</font>

218
00:12:40,790 --> 00:12:45,349
<font color="#E5E5E5">watching and you're welcome to give me</font>

219
00:12:42,800 --> 00:12:50,020
<font color="#E5E5E5">any feedbacks</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the comments so that</font><font color="#CCCCCC"> I</font>

220
00:12:45,350 --> 00:12:50,020
can<font color="#E5E5E5"> improve my class bye bye</font>

