1
00:00:05,380 --> 00:00:11,990
last time we have covered<font color="#CCCCCC"> in</font><font color="#E5E5E5"> detail how</font>

2
00:00:08,420 --> 00:00:14,389
<font color="#E5E5E5">attack and</font><font color="#CCCCCC"> vector works and today</font><font color="#E5E5E5"> we'll</font>

3
00:00:11,990 --> 00:00:17,540
go back to the<font color="#CCCCCC"> original</font><font color="#E5E5E5"> problem that we</font>

4
00:00:14,389 --> 00:00:19,910
were trying<font color="#CCCCCC"> to solve which is when</font><font color="#E5E5E5"> we</font>

5
00:00:17,540 --> 00:00:24,919
<font color="#CCCCCC">should use</font><font color="#E5E5E5"> a vector and when we should</font>

6
00:00:19,910 --> 00:00:27,349
<font color="#CCCCCC">use attack the obvious</font><font color="#E5E5E5"> answer is</font><font color="#CCCCCC"> if you</font>

7
00:00:24,920 --> 00:00:32,150
need to push front a<font color="#E5E5E5"> lot you</font><font color="#CCCCCC"> should use</font>

8
00:00:27,349 --> 00:00:35,809
a deck because push front<font color="#E5E5E5"> is expensive</font>

9
00:00:32,150 --> 00:00:38,420
<font color="#CCCCCC">for</font><font color="#E5E5E5"> vector and if the performance is</font>

10
00:00:35,809 --> 00:00:41,479
important to you<font color="#E5E5E5"> you</font><font color="#CCCCCC"> should</font><font color="#E5E5E5"> use vector</font>

11
00:00:38,420 --> 00:00:46,400
because in<font color="#CCCCCC"> general vector</font><font color="#E5E5E5"> is faster than</font>

12
00:00:41,479 --> 00:00:49,280
attack these two statements<font color="#CCCCCC"> work okay as</font>

13
00:00:46,400 --> 00:00:52,100
a general guideline<font color="#E5E5E5"> but they are not</font>

14
00:00:49,280 --> 00:00:54,440
enough<font color="#E5E5E5"> there are a lot of things you</font>

15
00:00:52,100 --> 00:00:57,080
need to<font color="#CCCCCC"> consider if you don't want to</font>

16
00:00:54,440 --> 00:01:01,839
suffer<font color="#E5E5E5"> later on as the data</font><font color="#CCCCCC"> stars become</font>

17
00:00:57,080 --> 00:01:05,869
bigger and<font color="#E5E5E5"> bigger first the element type</font>

18
00:01:01,839 --> 00:01:09,770
<font color="#E5E5E5">if the element type is not of a trivial</font>

19
00:01:05,869 --> 00:01:12,260
<font color="#E5E5E5">type or a built-in</font><font color="#CCCCCC"> datatype a deck is</font>

20
00:01:09,770 --> 00:01:15,770
not much less efficient than a vector

21
00:01:12,260 --> 00:01:18,590
<font color="#CCCCCC">that is because the</font><font color="#E5E5E5"> cost of the</font>

22
00:01:15,770 --> 00:01:21,199
<font color="#CCCCCC">construction and the</font><font color="#E5E5E5"> destruction starts</font>

23
00:01:18,590 --> 00:01:23,020
to<font color="#CCCCCC"> dominate the performance and that</font><font color="#E5E5E5"> the</font>

24
00:01:21,200 --> 00:01:28,760
performance of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> containers themselves</font>

25
00:01:23,020 --> 00:01:33,170
<font color="#CCCCCC">becomes less important number</font><font color="#E5E5E5"> two memory</font>

26
00:01:28,760 --> 00:01:35,630
availability as we said a vector always

27
00:01:33,170 --> 00:01:39,440
<font color="#E5E5E5">requires that data to reside in the</font>

28
00:01:35,630 --> 00:01:42,199
contiguous<font color="#E5E5E5"> memory chunk and some time</font>

29
00:01:39,440 --> 00:01:45,408
especially<font color="#E5E5E5"> when that vector becomes</font><font color="#CCCCCC"> big</font>

30
00:01:42,200 --> 00:01:48,950
<font color="#CCCCCC">and bigger</font><font color="#E5E5E5"> allocating a large contiguous</font>

31
00:01:45,409 --> 00:01:51,620
memory could become a problem<font color="#E5E5E5"> that is</font>

32
00:01:48,950 --> 00:01:55,010
because of either<font color="#E5E5E5"> it is an embedded</font>

33
00:01:51,620 --> 00:01:58,400
system and has<font color="#E5E5E5"> limited memory size or</font>

34
00:01:55,010 --> 00:02:03,890
the chunk of data simply<font color="#E5E5E5"> becomes too big</font>

35
00:01:58,400 --> 00:02:06,470
<font color="#E5E5E5">or the</font><font color="#CCCCCC"> memory is heavily fragmented so</font>

36
00:02:03,890 --> 00:02:08,720
if the allocation of large contiguous

37
00:02:06,470 --> 00:02:12,940
memory<font color="#E5E5E5"> could become a problem</font>

38
00:02:08,720 --> 00:02:12,940
you should prefer using<font color="#E5E5E5"> deck</font>

39
00:02:13,360 --> 00:02:21,190
number three frequency of unpredictable

40
00:02:16,810 --> 00:02:25,090
<font color="#E5E5E5">growth say we have a vector</font><font color="#CCCCCC"> int back and</font>

41
00:02:21,190 --> 00:02:29,829
we have a for loop<font color="#CCCCCC"> 4 into X equal to 0 X</font>

42
00:02:25,090 --> 00:02:35,080
less than<font color="#E5E5E5"> 1025 X plus plus and</font><font color="#CCCCCC"> vac dot</font>

43
00:02:29,830 --> 00:02:39,240
<font color="#CCCCCC">pushed back X this will push back 1024</font>

44
00:02:35,080 --> 00:02:43,540
integers into the<font color="#E5E5E5"> vector one by one</font><font color="#CCCCCC"> and</font>

45
00:02:39,240 --> 00:02:47,350
during this process<font color="#CCCCCC"> 11 reallocation will</font>

46
00:02:43,540 --> 00:02:53,010
be performed assuming the growth ratio

47
00:02:47,350 --> 00:02:57,549
<font color="#E5E5E5">is</font><font color="#CCCCCC"> 2 and as we said reallocation is</font>

48
00:02:53,010 --> 00:03:00,190
expensive the workaround<font color="#E5E5E5"> is using</font>

49
00:02:57,550 --> 00:03:03,640
reserve function to minimize<font color="#E5E5E5"> the number</font>

50
00:03:00,190 --> 00:03:06,070
of reallocation to be performed<font color="#E5E5E5"> however</font>

51
00:03:03,640 --> 00:03:08,609
to do that<font color="#E5E5E5"> we have to have some</font>

52
00:03:06,070 --> 00:03:11,739
knowledge of how the vector<font color="#CCCCCC"> closed</font>

53
00:03:08,610 --> 00:03:16,630
<font color="#E5E5E5">otherwise</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> reserve function can't</font>

54
00:03:11,740 --> 00:03:19,360
help much so if the growth<font color="#CCCCCC"> of the</font>

55
00:03:16,630 --> 00:03:22,900
container is completely unpredictable

56
00:03:19,360 --> 00:03:27,930
you should prefer using deck because

57
00:03:22,900 --> 00:03:31,330
deck has<font color="#E5E5E5"> no reallocation number for</font>

58
00:03:27,930 --> 00:03:35,140
invalidation<font color="#E5E5E5"> of pointers references and</font>

59
00:03:31,330 --> 00:03:38,350
iterators because of growth say I have a

60
00:03:35,140 --> 00:03:42,250
<font color="#E5E5E5">backed of int which has</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> integers</font><font color="#CCCCCC"> in</font>

61
00:03:38,350 --> 00:03:47,859
<font color="#E5E5E5">the vector and I have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> integer point of</font>

62
00:03:42,250 --> 00:03:51,310
P which points to back<font color="#E5E5E5"> three and then I</font>

63
00:03:47,860 --> 00:03:54,640
call<font color="#E5E5E5"> vac dot push back</font><font color="#CCCCCC"> 6 which push</font>

64
00:03:51,310 --> 00:03:58,959
backs<font color="#E5E5E5"> another item of</font><font color="#CCCCCC"> 6 into the vector</font>

65
00:03:54,640 --> 00:04:02,790
<font color="#E5E5E5">and then I print out the content that P</font>

66
00:03:58,959 --> 00:04:06,110
was pointing to<font color="#E5E5E5"> this results in</font>

67
00:04:02,790 --> 00:04:10,690
undefined behavior

68
00:04:06,110 --> 00:04:14,120
because when I push back<font color="#CCCCCC"> six it triggers</font>

69
00:04:10,690 --> 00:04:16,430
reallocation<font color="#E5E5E5"> and the reallocation</font><font color="#CCCCCC"> will</font>

70
00:04:14,120 --> 00:04:19,399
<font color="#E5E5E5">invalidates all the pointers</font><font color="#CCCCCC"> that</font>

71
00:04:16,430 --> 00:04:23,960
previously<font color="#E5E5E5"> was pointing to the data of</font>

72
00:04:19,399 --> 00:04:27,080
the vector and that pointer could be<font color="#CCCCCC"> a</font>

73
00:04:23,960 --> 00:04:30,770
<font color="#E5E5E5">row pointer</font><font color="#CCCCCC"> could be a</font><font color="#E5E5E5"> reference could</font>

74
00:04:27,080 --> 00:04:34,609
be a iterator any one of these will be

75
00:04:30,770 --> 00:04:38,810
invalidated however if I do the same

76
00:04:34,610 --> 00:04:44,390
<font color="#CCCCCC">thing for</font><font color="#E5E5E5"> Dec the result is okay it will</font>

77
00:04:38,810 --> 00:04:47,870
<font color="#E5E5E5">print out five so for that as long as</font>

78
00:04:44,390 --> 00:04:51,940
<font color="#E5E5E5">you are</font><font color="#CCCCCC"> growing the deck at both ends</font>

79
00:04:47,870 --> 00:04:55,880
<font color="#E5E5E5">all the pointers will not be invalidated</font>

80
00:04:51,940 --> 00:04:59,540
<font color="#E5E5E5">but if you insert elements or remove</font>

81
00:04:55,880 --> 00:05:04,969
elements<font color="#E5E5E5"> in the middle of the</font><font color="#CCCCCC"> deck</font><font color="#E5E5E5"> the</font>

82
00:04:59,540 --> 00:05:07,850
pointers<font color="#E5E5E5"> will also be invalidated so</font>

83
00:05:04,970 --> 00:05:13,580
that does a<font color="#E5E5E5"> better job of maintaining</font>

84
00:05:07,850 --> 00:05:16,790
the integrity of the pointers number

85
00:05:13,580 --> 00:05:21,219
five<font color="#CCCCCC"> a vector has a unique</font><font color="#E5E5E5"> function</font>

86
00:05:16,790 --> 00:05:24,500
which is it<font color="#E5E5E5"> can serve as a portal to</font><font color="#CCCCCC"> see</font>

87
00:05:21,220 --> 00:05:28,070
say we have a<font color="#CCCCCC"> C function which can which</font>

88
00:05:24,500 --> 00:05:32,120
takes an integer pointer and size<font color="#E5E5E5"> as</font>

89
00:05:28,070 --> 00:05:34,880
parameter for<font color="#E5E5E5"> vector we can</font><font color="#CCCCCC"> easily pass</font>

90
00:05:32,120 --> 00:05:38,270
the<font color="#E5E5E5"> address of the</font><font color="#CCCCCC"> first element of</font><font color="#E5E5E5"> the</font>

91
00:05:34,880 --> 00:05:42,790
vector and the vector size<font color="#E5E5E5"> as parameter</font>

92
00:05:38,270 --> 00:05:45,890
to the C function<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is very</font><font color="#E5E5E5"> convenient</font>

93
00:05:42,790 --> 00:05:48,860
the only other container that can do

94
00:05:45,890 --> 00:05:51,530
that<font color="#E5E5E5"> is the container array but the</font>

95
00:05:48,860 --> 00:05:55,340
container array is not<font color="#CCCCCC"> as easy to use as</font>

96
00:05:51,530 --> 00:05:59,000
a vector for<font color="#CCCCCC"> any other containers such</font>

97
00:05:55,340 --> 00:06:02,479
as a list<font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> copy all</font><font color="#E5E5E5"> the data</font>

98
00:05:59,000 --> 00:06:05,650
to<font color="#CCCCCC"> a vector and then pass the vector</font>

99
00:06:02,479 --> 00:06:08,380
data to the C<font color="#E5E5E5"> function</font>

100
00:06:05,650 --> 00:06:11,469
so the important<font color="#E5E5E5"> thing to remember is</font>

101
00:06:08,380 --> 00:06:15,699
the<font color="#CCCCCC"> edges</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> first element of a</font>

102
00:06:11,470 --> 00:06:19,620
vector<font color="#E5E5E5"> can be used as a raw array or a</font>

103
00:06:15,699 --> 00:06:25,090
pointer however there's one<font color="#E5E5E5"> exception</font>

104
00:06:19,620 --> 00:06:27,580
<font color="#E5E5E5">which is a vector</font><font color="#CCCCCC"> of pool but this</font>

105
00:06:25,090 --> 00:06:30,460
<font color="#E5E5E5">doesn't harm the</font><font color="#CCCCCC"> vectra's unique do they</font>

106
00:06:27,580 --> 00:06:34,870
as a<font color="#CCCCCC"> pot o</font><font color="#E5E5E5"> to C because C doesn't have a</font>

107
00:06:30,460 --> 00:06:37,120
pool type anyway<font color="#CCCCCC"> say we have a sip</font>

108
00:06:34,870 --> 00:06:40,060
response function which<font color="#E5E5E5"> takes a pool</font>

109
00:06:37,120 --> 00:06:44,860
pointer and a size as a parameter

110
00:06:40,060 --> 00:06:48,039
<font color="#E5E5E5">and we have a vector of pool back and we</font>

111
00:06:44,860 --> 00:06:53,400
call the C++ function with the edges of

112
00:06:48,039 --> 00:06:58,360
the first element of<font color="#CCCCCC"> vac and that size</font>

113
00:06:53,400 --> 00:07:01,750
<font color="#E5E5E5">this code will not compile because a</font>

114
00:06:58,360 --> 00:07:05,620
vector of pool is optimized so that<font color="#E5E5E5"> each</font>

115
00:07:01,750 --> 00:07:09,880
value<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> vector is represented</font><font color="#CCCCCC"> by</font>

116
00:07:05,620 --> 00:07:13,979
one bit so the edges of the first

117
00:07:09,880 --> 00:07:18,190
element of the<font color="#CCCCCC"> vac is not a bull pointer</font>

118
00:07:13,979 --> 00:07:21,940
so this cannot be passed as a pointer to

119
00:07:18,190 --> 00:07:25,990
the<font color="#CCCCCC"> sacred forest</font><font color="#E5E5E5"> function and the work</font>

120
00:07:21,940 --> 00:07:32,050
<font color="#E5E5E5">run is you can use a vector of int or</font>

121
00:07:25,990 --> 00:07:36,669
bit set<font color="#E5E5E5"> a summary if push</font><font color="#CCCCCC"> Front is</font>

122
00:07:32,050 --> 00:07:40,060
frequently used prefer<font color="#CCCCCC"> tack if the data</font>

123
00:07:36,669 --> 00:07:42,580
type is a beauty<font color="#E5E5E5"> in type prefer vector</font>

124
00:07:40,060 --> 00:07:46,780
if the data type is<font color="#E5E5E5"> not a beauty in type</font>

125
00:07:42,580 --> 00:07:50,139
<font color="#E5E5E5">prefer tack if allocation of large</font>

126
00:07:46,780 --> 00:07:55,049
contiguous memory is challenging<font color="#E5E5E5"> prefer</font>

127
00:07:50,139 --> 00:07:59,199
tack<font color="#E5E5E5"> if the data growth is unpredictable</font>

128
00:07:55,050 --> 00:08:02,440
<font color="#CCCCCC">proof.proof attack if it is important to</font>

129
00:07:59,199 --> 00:08:03,540
<font color="#E5E5E5">maintain the pointers integrity prefer</font>

130
00:08:02,440 --> 00:08:07,380
tack

131
00:08:03,540 --> 00:08:12,600
if the data is frequently<font color="#CCCCCC"> pastor to a c</font>

132
00:08:07,380 --> 00:08:14,670
function prefer vector that's all for

133
00:08:12,600 --> 00:08:16,980
today thank you for watching feel free

134
00:08:14,670 --> 00:08:19,500
to subscribe<font color="#CCCCCC"> to</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> channel</font><font color="#E5E5E5"> so when I</font>

135
00:08:16,980 --> 00:08:21,570
post<font color="#E5E5E5"> a</font><font color="#CCCCCC"> new video</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> will be updated</font><font color="#E5E5E5"> or</font>

136
00:08:19,500 --> 00:08:25,670
you can go to my<font color="#E5E5E5"> channels home page and</font>

137
00:08:21,570 --> 00:08:25,670
see<font color="#CCCCCC"> what I'm offering</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> bye bye</font>

