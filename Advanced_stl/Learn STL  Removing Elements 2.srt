1
00:00:00,110 --> 00:00:05,069
hello everyone<font color="#E5E5E5"> last time we've talked</font>

2
00:00:03,090 --> 00:00:08,760
<font color="#E5E5E5">about the chicks</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> removing elements</font>

3
00:00:05,069 --> 00:00:11,550
from<font color="#E5E5E5"> a container for vector and attack</font>

4
00:00:08,760 --> 00:00:14,910
<font color="#E5E5E5">you should</font><font color="#CCCCCC"> use algorithm function</font><font color="#E5E5E5"> remove</font>

5
00:00:11,550 --> 00:00:17,070
followed by<font color="#E5E5E5"> mem</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> in race for</font>

6
00:00:14,910 --> 00:00:20,039
<font color="#E5E5E5">list you should</font><font color="#CCCCCC"> use lists member</font>

7
00:00:17,070 --> 00:00:21,900
function<font color="#E5E5E5"> remove and for associative</font>

8
00:00:20,039 --> 00:00:24,600
container and unload at<font color="#CCCCCC"> the container</font>

9
00:00:21,900 --> 00:00:28,380
<font color="#E5E5E5">you should use their member function in</font>

10
00:00:24,600 --> 00:00:30,810
<font color="#E5E5E5">race today we will talk about removing</font>

11
00:00:28,380 --> 00:00:33,390
elements and doing<font color="#CCCCCC"> something else for</font>

12
00:00:30,810 --> 00:00:35,430
<font color="#CCCCCC">example I have a Mountie set of integer</font>

13
00:00:33,390 --> 00:00:38,820
and I want you<font color="#E5E5E5"> to move other ones and</font>

14
00:00:35,430 --> 00:00:40,680
every every time<font color="#CCCCCC"> I</font><font color="#E5E5E5"> remove a one I want</font>

15
00:00:38,820 --> 00:00:43,500
to print<font color="#CCCCCC"> a message</font><font color="#E5E5E5"> to the stand out</font>

16
00:00:40,680 --> 00:00:48,059
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to know it whenever our</font>

17
00:00:43,500 --> 00:00:51,300
element is<font color="#E5E5E5"> removed and I cannot do it</font>

18
00:00:48,059 --> 00:00:54,209
with all the<font color="#E5E5E5"> functions the LM function</font>

19
00:00:51,300 --> 00:00:57,510
remove the member function remove or the

20
00:00:54,210 --> 00:00:59,850
member member function<font color="#CCCCCC"> in</font><font color="#E5E5E5"> race so I will</font>

21
00:00:57,510 --> 00:01:03,269
<font color="#E5E5E5">manually create a loop to do the job and</font>

22
00:00:59,850 --> 00:01:05,640
here's what<font color="#E5E5E5"> I am doing</font><font color="#CCCCCC"> I use ETA equal</font>

23
00:01:03,270 --> 00:01:09,000
to<font color="#CCCCCC"> C dot begin</font><font color="#E5E5E5"> eternal just equal to a</font>

24
00:01:05,640 --> 00:01:12,659
sedan<font color="#E5E5E5"> and</font><font color="#CCCCCC"> E to a plus plus and if the</font>

25
00:01:09,000 --> 00:01:15,390
element<font color="#CCCCCC"> of ETA is equal</font><font color="#E5E5E5"> to 1 I</font><font color="#CCCCCC"> call</font>

26
00:01:12,659 --> 00:01:20,009
seated<font color="#CCCCCC"> erase ETA and print a message</font>

27
00:01:15,390 --> 00:01:22,470
<font color="#E5E5E5">erase the one item of ETA now you may</font>

28
00:01:20,009 --> 00:01:27,799
want<font color="#CCCCCC"> to pause the video and think</font><font color="#E5E5E5"> what</font>

29
00:01:22,470 --> 00:01:27,798
would happen<font color="#E5E5E5"> to this code let's run it</font>

30
00:01:29,020 --> 00:01:37,850
it prints out erased one item of<font color="#E5E5E5"> one and</font>

31
00:01:33,140 --> 00:01:40,460
then the program<font color="#E5E5E5"> crashed so the first</font>

32
00:01:37,850 --> 00:01:44,449
element<font color="#E5E5E5"> of one is erased and then the</font>

33
00:01:40,460 --> 00:01:47,990
<font color="#E5E5E5">program crashed</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> happened in the first</font>

34
00:01:44,450 --> 00:01:51,940
<font color="#E5E5E5">loop of the for loop eta is equal to</font><font color="#CCCCCC"> C</font>

35
00:01:47,990 --> 00:01:55,520
<font color="#E5E5E5">dot begin</font><font color="#CCCCCC"> which is the element of one</font>

36
00:01:51,940 --> 00:01:59,660
since this element is equal<font color="#E5E5E5"> to 1 it is</font>

37
00:01:55,520 --> 00:02:03,679
erased successfully and then something

38
00:01:59,660 --> 00:02:06,619
bad<font color="#CCCCCC"> happened after the code of seated a</font>

39
00:02:03,679 --> 00:02:10,390
<font color="#CCCCCC">Lay's</font><font color="#E5E5E5"> eater is finished the element that</font>

40
00:02:06,619 --> 00:02:14,000
<font color="#CCCCCC">Hitler was pointing to</font><font color="#E5E5E5"> is erased and</font>

41
00:02:10,389 --> 00:02:15,980
every time an element is erased<font color="#E5E5E5"> the</font>

42
00:02:14,000 --> 00:02:20,440
iterator that was pointing<font color="#CCCCCC"> to that</font>

43
00:02:15,980 --> 00:02:24,109
element is invalidated<font color="#CCCCCC"> so it is</font>

44
00:02:20,440 --> 00:02:27,170
invalidated<font color="#E5E5E5"> it is no longer a valid</font>

45
00:02:24,110 --> 00:02:31,040
iterator<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> and this is true for</font>

46
00:02:27,170 --> 00:02:35,119
<font color="#CCCCCC">all containers</font><font color="#E5E5E5"> iterators of erased</font>

47
00:02:31,040 --> 00:02:37,280
<font color="#E5E5E5">elements are always invalidated so when</font>

48
00:02:35,120 --> 00:02:41,390
we go to<font color="#E5E5E5"> the second</font><font color="#CCCCCC"> run of</font><font color="#E5E5E5"> the for loop</font>

49
00:02:37,280 --> 00:02:45,470
<font color="#CCCCCC">and check if</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> C dot</font><font color="#CCCCCC"> end the</font>

50
00:02:41,390 --> 00:02:47,958
result is undefined behavior and in this

51
00:02:45,470 --> 00:02:51,459
case the undefined behavior is the

52
00:02:47,959 --> 00:02:55,010
program crashed<font color="#E5E5E5"> so how can we fix this</font>

53
00:02:51,459 --> 00:03:01,340
one way to fix it<font color="#E5E5E5"> is we can move the</font>

54
00:02:55,010 --> 00:03:04,160
incrementing of ETA<font color="#CCCCCC"> 2 over</font><font color="#E5E5E5"> here now</font>

55
00:03:01,340 --> 00:03:08,329
since<font color="#CCCCCC"> this is a post incrementing of ETA</font>

56
00:03:04,160 --> 00:03:12,620
it will return the<font color="#E5E5E5"> old iterator</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> C to</font>

57
00:03:08,329 --> 00:03:14,910
erase and<font color="#E5E5E5"> it is advanced to the next</font>

58
00:03:12,620 --> 00:03:18,060
element<font color="#E5E5E5"> successfully</font>

59
00:03:14,910 --> 00:03:20,520
and that the since the<font color="#CCCCCC"> eater is already</font>

60
00:03:18,060 --> 00:03:26,130
pointing<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> next element</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to</font>

61
00:03:20,520 --> 00:03:31,470
move this statement<font color="#E5E5E5"> to the before the</font>

62
00:03:26,130 --> 00:03:33,900
race<font color="#E5E5E5"> and when</font><font color="#CCCCCC"> we'll go to the second</font><font color="#E5E5E5"> run</font>

63
00:03:31,470 --> 00:03:40,260
of<font color="#CCCCCC"> the for loop it is already pointing</font>

64
00:03:33,900 --> 00:03:43,710
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> next element</font><font color="#E5E5E5"> if it is not</font><font color="#CCCCCC"> equal</font>

65
00:03:40,260 --> 00:03:48,030
to<font color="#E5E5E5"> one when you need</font><font color="#CCCCCC"> to increment the</font>

66
00:03:43,710 --> 00:03:52,400
eater now let's run<font color="#E5E5E5"> that loop on the</font>

67
00:03:48,030 --> 00:03:58,500
program<font color="#E5E5E5"> now all the ones are erased</font>

68
00:03:52,400 --> 00:04:04,110
<font color="#E5E5E5">successfully and the program did</font><font color="#CCCCCC"> not</font>

69
00:03:58,500 --> 00:04:06,540
crash<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is how you erase elements</font>

70
00:04:04,110 --> 00:04:10,080
from associative containers<font color="#E5E5E5"> with</font>

71
00:04:06,540 --> 00:04:13,140
<font color="#E5E5E5">handcrafted loop now how</font><font color="#CCCCCC"> about the other</font>

72
00:04:10,080 --> 00:04:15,600
containers what about vectors<font color="#E5E5E5"> can I use</font>

73
00:04:13,140 --> 00:04:20,269
this same way to erase elements from a

74
00:04:15,600 --> 00:04:20,269
<font color="#E5E5E5">vector let's try it</font>

75
00:04:22,830 --> 00:04:28,050
and run it

76
00:04:28,930 --> 00:04:38,050
as you see<font color="#E5E5E5"> only three elements</font><font color="#CCCCCC"> of one</font>

77
00:04:32,530 --> 00:04:41,729
are erased now<font color="#CCCCCC"> what happened four-vector</font>

78
00:04:38,050 --> 00:04:44,520
when never<font color="#E5E5E5"> an element is erased all the</font>

79
00:04:41,729 --> 00:04:48,460
<font color="#E5E5E5">iterators after that element are</font>

80
00:04:44,520 --> 00:04:51,580
invalidated<font color="#E5E5E5"> so whenever one is erased</font>

81
00:04:48,460 --> 00:04:55,198
all the<font color="#E5E5E5"> iterators that points to any one</font>

82
00:04:51,580 --> 00:04:59,258
of<font color="#E5E5E5"> the rest of element</font><font color="#CCCCCC"> gets invalidated</font>

83
00:04:55,199 --> 00:05:02,710
<font color="#E5E5E5">so even though it is advanced to the</font>

84
00:04:59,259 --> 00:05:06,430
<font color="#E5E5E5">next element successfully it is still a</font>

85
00:05:02,710 --> 00:05:09,659
invalidated<font color="#E5E5E5"> iterator so the rest of the</font>

86
00:05:06,430 --> 00:05:12,430
<font color="#E5E5E5">program still has undefined behavior and</font>

87
00:05:09,660 --> 00:05:15,130
in this case the undefined behavior

88
00:05:12,430 --> 00:05:16,479
gives you an<font color="#CCCCCC"> illusion that</font><font color="#E5E5E5"> the program</font>

89
00:05:15,130 --> 00:05:21,639
is<font color="#E5E5E5"> running okay</font>

90
00:05:16,479 --> 00:05:27,039
which is worse than crashing the correct

91
00:05:21,639 --> 00:05:32,229
way to do it is this<font color="#CCCCCC"> get er equal to say</font>

92
00:05:27,039 --> 00:05:35,139
that<font color="#CCCCCC"> erase eater because</font><font color="#E5E5E5"> the vectors</font>

93
00:05:32,229 --> 00:05:37,659
erase<font color="#CCCCCC"> function always return a valid</font>

94
00:05:35,139 --> 00:05:41,949
iterator<font color="#E5E5E5"> that points to the next element</font>

95
00:05:37,660 --> 00:05:44,610
<font color="#CCCCCC">after that you raise the element now</font>

96
00:05:41,949 --> 00:05:44,610
let's run it

97
00:05:45,400 --> 00:05:57,010
now all<font color="#CCCCCC"> that</font><font color="#E5E5E5"> ones are erased and the</font>

98
00:05:49,960 --> 00:05:59,430
<font color="#CCCCCC">program did not crash so this is the</font>

99
00:05:57,010 --> 00:06:01,900
correct<font color="#E5E5E5"> way to erase elements from</font>

100
00:05:59,430 --> 00:06:07,780
sequence container and unordered

101
00:06:01,900 --> 00:06:10,510
<font color="#E5E5E5">container as a summary for sequence</font>

102
00:06:07,780 --> 00:06:12,760
container<font color="#CCCCCC"> an unloaded container</font><font color="#E5E5E5"> you use</font>

103
00:06:10,510 --> 00:06:17,080
the<font color="#E5E5E5"> return value</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> erase function</font>

104
00:06:12,760 --> 00:06:20,979
<font color="#CCCCCC">as the next element and for associative</font>

105
00:06:17,080 --> 00:06:24,280
container you use post<font color="#E5E5E5"> incrementing to</font>

106
00:06:20,979 --> 00:06:26,169
advance to the<font color="#E5E5E5"> next element you can't</font>

107
00:06:24,280 --> 00:06:27,820
use the returned value because

108
00:06:26,169 --> 00:06:32,080
associative containers of<font color="#CCCCCC"> utilize</font>

109
00:06:27,820 --> 00:06:34,270
function returns<font color="#E5E5E5"> nothing now I have to</font>

110
00:06:32,080 --> 00:06:37,000
<font color="#E5E5E5">confess that I have been</font><font color="#CCCCCC"> misleading you</font>

111
00:06:34,270 --> 00:06:38,560
to<font color="#CCCCCC"> handcraft</font><font color="#E5E5E5"> your own group of course</font>

112
00:06:37,000 --> 00:06:41,190
you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to hand craft your own</font>

113
00:06:38,560 --> 00:06:44,669
<font color="#E5E5E5">loop you can</font><font color="#CCCCCC"> always use the algorithm</font>

114
00:06:41,190 --> 00:06:49,630
<font color="#CCCCCC">now let me show</font><font color="#E5E5E5"> you the library solution</font>

115
00:06:44,669 --> 00:06:55,000
let me remove this loop first<font color="#CCCCCC"> out</font><font color="#E5E5E5"> define</font>

116
00:06:49,630 --> 00:06:58,510
<font color="#E5E5E5">a</font><font color="#CCCCCC"> function it's called equal one</font><font color="#E5E5E5"> it</font>

117
00:06:55,000 --> 00:07:00,940
takes one parameter<font color="#E5E5E5"> of integer e if e</font>

118
00:06:58,510 --> 00:07:04,000
you<font color="#CCCCCC"> cut</font><font color="#E5E5E5"> one it print out a message and</font>

119
00:07:00,940 --> 00:07:07,450
then return true otherwise it will

120
00:07:04,000 --> 00:07:11,440
return false and then<font color="#E5E5E5"> I call the</font>

121
00:07:07,450 --> 00:07:14,560
algorithm function will move if remove

122
00:07:11,440 --> 00:07:17,410
if setup begins<font color="#CCCCCC"> at the end equal</font><font color="#E5E5E5"> one and</font>

123
00:07:14,560 --> 00:07:20,610
<font color="#E5E5E5">followed by the member function erased</font>

124
00:07:17,410 --> 00:07:24,090
<font color="#CCCCCC">to do the actual work of evasion</font><font color="#E5E5E5"> and</font>

125
00:07:20,610 --> 00:07:24,090
let's run it

126
00:07:24,110 --> 00:07:33,150
as you see this<font color="#CCCCCC"> also removed</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

127
00:07:28,440 --> 00:07:34,949
ones<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> container so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

128
00:07:33,150 --> 00:07:37,760
accomplish the<font color="#CCCCCC"> same thing without</font>

129
00:07:34,949 --> 00:07:42,900
worrying about all the<font color="#CCCCCC"> pitfalls of</font>

130
00:07:37,760 --> 00:07:46,289
<font color="#CCCCCC">handcrafting a loop of</font><font color="#E5E5E5"> elation now you</font>

131
00:07:42,900 --> 00:07:48,719
may say this<font color="#CCCCCC"> is not flexible what if I</font>

132
00:07:46,290 --> 00:07:51,090
want to erase<font color="#E5E5E5"> 12 do I need to create</font>

133
00:07:48,720 --> 00:07:54,870
<font color="#E5E5E5">another function to check if</font><font color="#CCCCCC"> e equal to</font>

134
00:07:51,090 --> 00:07:58,198
<font color="#E5E5E5">12 that is a good point we can make our</font>

135
00:07:54,870 --> 00:08:02,310
solution better<font color="#E5E5E5"> we can add add another</font>

136
00:07:58,199 --> 00:08:05,310
integer<font color="#E5E5E5"> parameter called P and if e</font>

137
00:08:02,310 --> 00:08:08,490
equal to<font color="#E5E5E5"> P it returns true otherwise it</font>

138
00:08:05,310 --> 00:08:12,180
will return false and in the<font color="#CCCCCC"> removi</font>

139
00:08:08,490 --> 00:08:14,940
<font color="#CCCCCC">function we can use</font><font color="#E5E5E5"> find function to</font>

140
00:08:12,180 --> 00:08:20,460
bind the second parameter<font color="#E5E5E5"> to any number</font>

141
00:08:14,940 --> 00:08:28,349
<font color="#E5E5E5">we want say we want to remove 12 and run</font>

142
00:08:20,460 --> 00:08:31,409
it<font color="#E5E5E5"> only one item</font><font color="#CCCCCC"> of 12 is removed</font><font color="#E5E5E5"> now</font>

143
00:08:28,349 --> 00:08:34,620
some people<font color="#E5E5E5"> may say this</font><font color="#CCCCCC"> is still</font><font color="#E5E5E5"> not as</font>

144
00:08:31,410 --> 00:08:36,930
flexible<font color="#E5E5E5"> as I wanted it</font><font color="#CCCCCC"> to be because if</font>

145
00:08:34,620 --> 00:08:39,479
I want to print out different message<font color="#CCCCCC"> I</font>

146
00:08:36,929 --> 00:08:42,630
still need to<font color="#E5E5E5"> create different function</font>

147
00:08:39,479 --> 00:08:47,820
for that<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> we can make it even</font>

148
00:08:42,630 --> 00:08:51,330
<font color="#E5E5E5">better</font><font color="#CCCCCC"> and we could use</font><font color="#E5E5E5"> a lambda</font>

149
00:08:47,820 --> 00:08:54,450
function<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> the job with lambda</font>

150
00:08:51,330 --> 00:08:58,350
function it<font color="#E5E5E5"> is almost as flexible as</font>

151
00:08:54,450 --> 00:09:00,959
<font color="#CCCCCC">handcrafting a loop and without worrying</font>

152
00:08:58,350 --> 00:09:02,740
about<font color="#E5E5E5"> all the Saturday</font><font color="#CCCCCC"> of handcrafting a</font>

153
00:09:00,959 --> 00:09:06,069
loop

154
00:09:02,740 --> 00:09:08,890
and also<font color="#E5E5E5"> with lambda function or the</font>

155
00:09:06,070 --> 00:09:14,250
code<font color="#E5E5E5"> are located in the same place</font>

156
00:09:08,890 --> 00:09:19,810
not like locating in another function

157
00:09:14,250 --> 00:09:24,190
<font color="#E5E5E5">now let's run it and see if it works it</font>

158
00:09:19,810 --> 00:09:26,770
works<font color="#CCCCCC"> 12</font><font color="#E5E5E5"> is removed so</font><font color="#CCCCCC"> as you see I'll</font>

159
00:09:24,190 --> 00:09:29,950
<font color="#CCCCCC">put some plus lambda function is a</font><font color="#E5E5E5"> very</font>

160
00:09:26,770 --> 00:09:34,529
powerful<font color="#E5E5E5"> combination</font><font color="#CCCCCC"> as well as you get</font>

161
00:09:29,950 --> 00:09:36,790
used to<font color="#E5E5E5"> the syntax of a lambda</font><font color="#CCCCCC"> function</font>

162
00:09:34,529 --> 00:09:39,220
that's<font color="#E5E5E5"> all for today thank you for</font>

163
00:09:36,790 --> 00:09:41,649
<font color="#E5E5E5">watching feel free to subscribe</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> my</font>

164
00:09:39,220 --> 00:09:43,720
<font color="#CCCCCC">channel</font><font color="#E5E5E5"> so when I post a new video</font><font color="#CCCCCC"> you</font>

165
00:09:41,649 --> 00:09:45,520
will be<font color="#CCCCCC"> updated</font><font color="#E5E5E5"> or you can go to my</font>

166
00:09:43,720 --> 00:09:48,959
<font color="#E5E5E5">channels home page and see</font><font color="#CCCCCC"> what I'm</font>

167
00:09:45,520 --> 00:09:48,959
offering today<font color="#CCCCCC"> bye bye</font>

