1
00:00:00,290 --> 00:00:06,270
hello everyone<font color="#CCCCCC"> today I'll start</font><font color="#E5E5E5"> using a</font>

2
00:00:03,720 --> 00:00:09,630
live demo kind of presentation<font color="#E5E5E5"> to show</font>

3
00:00:06,270 --> 00:00:12,420
you the coding techniques and see how it

4
00:00:09,630 --> 00:00:15,480
works<font color="#E5E5E5"> first let</font><font color="#CCCCCC"> me introduce you a</font>

5
00:00:12,420 --> 00:00:18,859
helper function called print it prints

6
00:00:15,480 --> 00:00:23,300
out<font color="#E5E5E5"> all the contents of a container and</font>

7
00:00:18,859 --> 00:00:26,670
prefix it<font color="#CCCCCC"> with a message of stream</font><font color="#E5E5E5"> and</font>

8
00:00:23,300 --> 00:00:29,820
here<font color="#E5E5E5"> I have a vector of int C which</font>

9
00:00:26,670 --> 00:00:34,130
contains a bunch of<font color="#E5E5E5"> integers and I print</font>

10
00:00:29,820 --> 00:00:38,910
C and original<font color="#E5E5E5"> see what it</font><font color="#CCCCCC"> prints out</font>

11
00:00:34,130 --> 00:00:41,879
and<font color="#CCCCCC"> the content</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> vector is printed</font>

12
00:00:38,910 --> 00:00:45,959
out successfully so our environment is

13
00:00:41,879 --> 00:00:48,960
good to go today we'll talk<font color="#E5E5E5"> about the</font>

14
00:00:45,960 --> 00:00:51,120
removing items from<font color="#E5E5E5"> a container let's</font>

15
00:00:48,960 --> 00:00:55,230
see I want<font color="#E5E5E5"> to remove all the ones from</font>

16
00:00:51,120 --> 00:00:57,930
<font color="#E5E5E5">the vector C remember in one of the</font>

17
00:00:55,230 --> 00:01:00,989
<font color="#CCCCCC">previous video I mentioned</font><font color="#E5E5E5"> that if there</font>

18
00:00:57,930 --> 00:01:03,840
<font color="#E5E5E5">are same function</font><font color="#CCCCCC"> in a containers member</font>

19
00:01:00,989 --> 00:01:07,229
function and<font color="#CCCCCC"> al-sham</font><font color="#E5E5E5"> function you should</font>

20
00:01:03,840 --> 00:01:09,689
prefer using the member function so<font color="#E5E5E5"> I</font>

21
00:01:07,229 --> 00:01:12,840
start<font color="#E5E5E5"> by searching the vectors member</font>

22
00:01:09,689 --> 00:01:14,850
<font color="#E5E5E5">function see if anything I can use</font><font color="#CCCCCC"> and I</font>

23
00:01:12,840 --> 00:01:18,630
see there's a function called<font color="#E5E5E5"> erase</font>

24
00:01:14,850 --> 00:01:21,259
bingo<font color="#E5E5E5"> that's what I need so here's what</font>

25
00:01:18,630 --> 00:01:21,259
I'm gonna do

26
00:01:22,720 --> 00:01:32,050
I use a iterator to<font color="#CCCCCC"> iterator slew the</font>

27
00:01:27,990 --> 00:01:35,560
members<font color="#CCCCCC"> of the container</font><font color="#E5E5E5"> see and if it</font>

28
00:01:32,050 --> 00:01:39,610
equal<font color="#CCCCCC"> to</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> I erase</font><font color="#E5E5E5"> it otherwise I just</font>

29
00:01:35,560 --> 00:01:45,580
<font color="#E5E5E5">increment the</font><font color="#CCCCCC"> eater</font><font color="#E5E5E5"> and to see how it</font>

30
00:01:39,610 --> 00:01:48,580
goes<font color="#E5E5E5"> as you see after the loop of erase</font>

31
00:01:45,580 --> 00:01:52,050
all the ones are removed from<font color="#E5E5E5"> the</font>

32
00:01:48,580 --> 00:01:54,789
original<font color="#E5E5E5"> vector mission complete</font>

33
00:01:52,050 --> 00:01:57,490
although this code can get the job<font color="#E5E5E5"> done</font>

34
00:01:54,790 --> 00:02:00,940
this<font color="#E5E5E5"> is actually a horrible way of</font>

35
00:01:57,490 --> 00:02:03,699
removing items from<font color="#E5E5E5"> a vector</font><font color="#CCCCCC"> when I</font>

36
00:02:00,940 --> 00:02:07,860
remove<font color="#CCCCCC"> the first one all the items</font><font color="#E5E5E5"> after</font>

37
00:02:03,700 --> 00:02:10,840
<font color="#E5E5E5">that moved one item toward the front and</font>

38
00:02:07,860 --> 00:02:14,320
<font color="#E5E5E5">then when I remove the second one all</font>

39
00:02:10,840 --> 00:02:17,910
the items<font color="#E5E5E5"> after that</font><font color="#CCCCCC"> I once again</font><font color="#E5E5E5"> move</font>

40
00:02:14,320 --> 00:02:22,720
one item<font color="#E5E5E5"> toward the front this is</font><font color="#CCCCCC"> a very</font>

41
00:02:17,910 --> 00:02:25,750
<font color="#CCCCCC">inefficient way of removing items if the</font>

42
00:02:22,720 --> 00:02:28,750
size of<font color="#E5E5E5"> the vector C is N and the number</font>

43
00:02:25,750 --> 00:02:32,080
<font color="#CCCCCC">of items</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be removed</font><font color="#E5E5E5"> is M then the</font>

44
00:02:28,750 --> 00:02:34,450
complexity of this code is n times of<font color="#E5E5E5"> M</font>

45
00:02:32,080 --> 00:02:38,020
this<font color="#E5E5E5"> is a very inefficient</font><font color="#CCCCCC"> way of</font>

46
00:02:34,450 --> 00:02:40,350
<font color="#CCCCCC">removing</font><font color="#E5E5E5"> item from vector a more</font>

47
00:02:38,020 --> 00:02:44,470
efficient way<font color="#E5E5E5"> is actually using</font>

48
00:02:40,350 --> 00:02:47,350
<font color="#E5E5E5">algorithm function</font><font color="#CCCCCC"> removes the algorithm</font>

49
00:02:44,470 --> 00:02:50,290
function remove<font color="#E5E5E5"> only moves the Unruh</font>

50
00:02:47,350 --> 00:02:54,010
<font color="#E5E5E5">moved items to walk to the front</font><font color="#CCCCCC"> once</font>

51
00:02:50,290 --> 00:02:58,120
instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> M times so the complexity is</font>

52
00:02:54,010 --> 00:03:03,390
n now let's comment out this<font color="#CCCCCC"> four</font>

53
00:02:58,120 --> 00:03:06,030
<font color="#E5E5E5">portion of the code and see</font><font color="#CCCCCC"> how it runs</font>

54
00:03:03,390 --> 00:03:08,768
oops<font color="#CCCCCC"> we have a problem</font><font color="#E5E5E5"> here</font>

55
00:03:06,030 --> 00:03:11,739
although the<font color="#E5E5E5"> unremoved items are moved</font>

56
00:03:08,769 --> 00:03:13,989
<font color="#CCCCCC">towards the</font><font color="#E5E5E5"> front as we expected the</font>

57
00:03:11,739 --> 00:03:19,000
vector<font color="#CCCCCC"> CEO also contains some other</font>

58
00:03:13,989 --> 00:03:21,579
<font color="#E5E5E5">items as I mentioned before algorithm</font>

59
00:03:19,000 --> 00:03:23,500
functions<font color="#E5E5E5"> has no idea about the</font>

60
00:03:21,579 --> 00:03:25,260
<font color="#CCCCCC">containers they only know the data</font>

61
00:03:23,500 --> 00:03:28,090
through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> iterators</font>

62
00:03:25,260 --> 00:03:30,969
so the algorithm function<font color="#E5E5E5"> you move has</font>

63
00:03:28,090 --> 00:03:34,750
no idea whether the data is<font color="#E5E5E5"> stored on a</font>

64
00:03:30,969 --> 00:03:38,709
<font color="#E5E5E5">dynamic array or a binary tree or a hash</font>

65
00:03:34,750 --> 00:03:40,870
table<font color="#CCCCCC"> that is why it is impossible for</font>

66
00:03:38,709 --> 00:03:43,209
the algorithm<font color="#E5E5E5"> function you move to</font>

67
00:03:40,870 --> 00:03:48,310
actually<font color="#E5E5E5"> remove the items from the</font>

68
00:03:43,209 --> 00:03:51,459
container<font color="#E5E5E5"> so this function</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> move will</font>

69
00:03:48,310 --> 00:03:54,040
do what it can<font color="#E5E5E5"> do which is move all the</font>

70
00:03:51,459 --> 00:03:57,129
<font color="#CCCCCC">unremoved</font><font color="#E5E5E5"> items to the front of the</font>

71
00:03:54,040 --> 00:03:59,918
vector and then return the iterator

72
00:03:57,129 --> 00:04:03,578
<font color="#E5E5E5">which points to</font><font color="#CCCCCC"> the new logical end of</font>

73
00:03:59,919 --> 00:04:07,780
the new<font color="#E5E5E5"> vector so to complete the task</font>

74
00:04:03,579 --> 00:04:11,530
of removal we need a pointer<font color="#E5E5E5"> is</font><font color="#CCCCCC"> reiter</font>

75
00:04:07,780 --> 00:04:16,620
<font color="#E5E5E5">to save the new end and then call the</font>

76
00:04:11,530 --> 00:04:20,949
member function of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vector arrays</font><font color="#E5E5E5"> to</font>

77
00:04:16,620 --> 00:04:26,050
<font color="#CCCCCC">actually remove the item</font><font color="#E5E5E5"> now let's run</font>

78
00:04:20,949 --> 00:04:30,880
it now the removal<font color="#CCCCCC"> walk is</font><font color="#E5E5E5"> truly</font>

79
00:04:26,050 --> 00:04:33,550
finished we have removed all<font color="#CCCCCC"> the ones in</font>

80
00:04:30,880 --> 00:04:39,729
<font color="#E5E5E5">vector C and what will be the capacity</font>

81
00:04:33,550 --> 00:04:43,210
<font color="#CCCCCC">of C</font><font color="#E5E5E5"> let's check it out as you see</font><font color="#CCCCCC"> the</font>

82
00:04:39,729 --> 00:04:46,810
capacity<font color="#CCCCCC"> of C is still 10 we have</font>

83
00:04:43,210 --> 00:04:50,620
reduced the<font color="#CCCCCC"> size of C from</font><font color="#E5E5E5"> 10 to 5 and</font>

84
00:04:46,810 --> 00:04:54,520
the C is<font color="#E5E5E5"> still occupying as much memory</font>

85
00:04:50,620 --> 00:04:56,620
<font color="#CCCCCC">as it does before if that piece of</font>

86
00:04:54,520 --> 00:04:59,080
memory is important to you<font color="#E5E5E5"> and you want</font>

87
00:04:56,620 --> 00:05:02,639
to release them back to the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> there</font>

88
00:04:59,080 --> 00:05:02,639
<font color="#CCCCCC">is one</font><font color="#E5E5E5"> extra step to do</font>

89
00:05:03,200 --> 00:05:09,300
you can call the function shrink to fit

90
00:05:06,360 --> 00:05:19,230
which will release the unused memory

91
00:05:09,300 --> 00:05:22,910
back to the system now let's run it now

92
00:05:19,230 --> 00:05:26,310
the capacity of<font color="#CCCCCC"> C is reduced to 5</font>

93
00:05:22,910 --> 00:05:30,180
however<font color="#E5E5E5"> this function shrink to fit only</font>

94
00:05:26,310 --> 00:05:34,490
exists in<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> 11</font><font color="#CCCCCC"> if you are using Otzi</font>

95
00:05:30,180 --> 00:05:37,950
<font color="#E5E5E5">pass pass you can</font><font color="#CCCCCC"> use the</font><font color="#E5E5E5"> swap check and</font>

96
00:05:34,490 --> 00:05:44,610
this should<font color="#CCCCCC"> also do the job of shrinking</font>

97
00:05:37,950 --> 00:05:47,880
the<font color="#E5E5E5"> memory now let's run it as you see</font>

98
00:05:44,610 --> 00:05:52,710
now<font color="#E5E5E5"> the capacity is 5 so the memory is</font>

99
00:05:47,880 --> 00:05:56,159
shrinked now let's talk<font color="#CCCCCC"> about new move</font>

100
00:05:52,710 --> 00:05:58,680
<font color="#E5E5E5">elements from a list since we've just</font>

101
00:05:56,160 --> 00:06:01,890
<font color="#CCCCCC">learned a lesson from the</font><font color="#E5E5E5"> backticks</font>

102
00:05:58,680 --> 00:06:04,050
example we'll<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> absent function</font>

103
00:06:01,890 --> 00:06:10,320
<font color="#CCCCCC">remove followed</font><font color="#E5E5E5"> by the member function</font>

104
00:06:04,050 --> 00:06:12,900
<font color="#E5E5E5">erase and run it this also gets the job</font>

105
00:06:10,320 --> 00:06:17,250
<font color="#CCCCCC">done for</font><font color="#E5E5E5"> a list but this is not the</font>

106
00:06:12,900 --> 00:06:21,780
<font color="#E5E5E5">optimal way of removing</font><font color="#CCCCCC"> items list has a</font>

107
00:06:17,250 --> 00:06:25,050
member function called remove and the

108
00:06:21,780 --> 00:06:28,979
<font color="#CCCCCC">decimal move function can do the job of</font>

109
00:06:25,050 --> 00:06:32,610
removing items<font color="#E5E5E5"> more efficiently why is</font>

110
00:06:28,980 --> 00:06:35,940
that<font color="#E5E5E5"> as we</font><font color="#CCCCCC"> mentioned the algorithm</font>

111
00:06:32,610 --> 00:06:38,940
function<font color="#CCCCCC"> remove does the job by moving</font>

112
00:06:35,940 --> 00:06:42,450
the<font color="#CCCCCC"> Unruh moved items</font><font color="#E5E5E5"> towards the front</font>

113
00:06:38,940 --> 00:06:47,130
of<font color="#E5E5E5"> the vector but</font><font color="#CCCCCC"> the member function</font>

114
00:06:42,450 --> 00:06:48,510
remove doesn't do that the member

115
00:06:47,130 --> 00:06:51,240
function you move<font color="#E5E5E5"> knows the data</font>

116
00:06:48,510 --> 00:06:53,490
structure<font color="#E5E5E5"> of a linked list</font><font color="#CCCCCC"> so it does</font>

117
00:06:51,240 --> 00:06:56,430
<font color="#E5E5E5">still remove by clicking the forward</font>

118
00:06:53,490 --> 00:07:00,660
pointer and the backward pointers<font color="#E5E5E5"> which</font>

119
00:06:56,430 --> 00:07:03,630
is more efficient so now this is<font color="#E5E5E5"> a</font>

120
00:07:00,660 --> 00:07:07,710
faster easier<font color="#E5E5E5"> and cleaner way of</font>

121
00:07:03,630 --> 00:07:10,150
<font color="#E5E5E5">removing items for a list</font>

122
00:07:07,710 --> 00:07:12,760
now let's look at<font color="#CCCCCC"> a new move elements</font>

123
00:07:10,150 --> 00:07:15,669
<font color="#CCCCCC">from associative container or unordered</font>

124
00:07:12,760 --> 00:07:18,610
<font color="#E5E5E5">containers we have a multi set of</font>

125
00:07:15,670 --> 00:07:22,210
integer<font color="#CCCCCC"> C and we want to remove all the</font>

126
00:07:18,610 --> 00:07:25,270
ones we look at the multi set mem

127
00:07:22,210 --> 00:07:30,010
function and we don't see a dedicated

128
00:07:25,270 --> 00:07:32,650
<font color="#E5E5E5">remove function like the list does so</font>

129
00:07:30,010 --> 00:07:34,630
maybe we should<font color="#CCCCCC"> go</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> to use that will</font>

130
00:07:32,650 --> 00:07:39,060
move algorithm followed by<font color="#E5E5E5"> erase</font>

131
00:07:34,630 --> 00:07:41,680
function<font color="#E5E5E5"> the answer is no you don't</font>

132
00:07:39,060 --> 00:07:44,410
although<font color="#CCCCCC"> multiset doesn't have a</font>

133
00:07:41,680 --> 00:07:49,200
dedicated remove member function it has

134
00:07:44,410 --> 00:07:51,970
<font color="#CCCCCC">a much better version of erase function</font>

135
00:07:49,200 --> 00:07:56,729
<font color="#E5E5E5">the multi sets the erase function can</font>

136
00:07:51,970 --> 00:07:59,620
remove items by value<font color="#CCCCCC"> and do it quickly</font>

137
00:07:56,730 --> 00:08:07,360
<font color="#E5E5E5">let's comment</font><font color="#CCCCCC"> out this portion of code</font>

138
00:07:59,620 --> 00:08:10,360
and run it the<font color="#E5E5E5"> multi sets erase function</font>

139
00:08:07,360 --> 00:08:14,860
<font color="#E5E5E5">only needs logarithmic time to do the</font>

140
00:08:10,360 --> 00:08:17,770
removal<font color="#E5E5E5"> instead of linear time and for</font>

141
00:08:14,860 --> 00:08:20,860
unordered<font color="#E5E5E5"> container it is even faster it</font>

142
00:08:17,770 --> 00:08:24,669
only needs amortized constant time to do

143
00:08:20,860 --> 00:08:27,070
the erase so in<font color="#E5E5E5"> both case you should use</font>

144
00:08:24,670 --> 00:08:30,490
the member function<font color="#E5E5E5"> in race to do the</font>

145
00:08:27,070 --> 00:08:33,280
function of removal<font color="#CCCCCC"> a similar way</font><font color="#E5E5E5"> of</font>

146
00:08:30,490 --> 00:08:36,010
removing<font color="#E5E5E5"> elements from a container for</font>

147
00:08:33,280 --> 00:08:39,429
vector or<font color="#CCCCCC"> tack use out some remove</font>

148
00:08:36,010 --> 00:08:42,159
followed by member<font color="#E5E5E5"> function erase for</font>

149
00:08:39,429 --> 00:08:44,020
<font color="#CCCCCC">lists</font><font color="#E5E5E5"> use member function remove for</font>

150
00:08:42,159 --> 00:08:48,480
associative container or<font color="#CCCCCC"> unordered</font>

151
00:08:44,020 --> 00:08:48,480
<font color="#E5E5E5">container used member function erase</font>

152
00:08:49,610 --> 00:08:53,870
that's all for today<font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you for</font>

153
00:08:51,530 --> 00:08:56,300
<font color="#CCCCCC">watching feel free to</font><font color="#E5E5E5"> subscribe</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> my</font>

154
00:08:53,870 --> 00:08:58,370
<font color="#CCCCCC">channel</font><font color="#E5E5E5"> so when I post a</font><font color="#CCCCCC"> new video you</font>

155
00:08:56,300 --> 00:09:00,170
will<font color="#E5E5E5"> be updated</font><font color="#CCCCCC"> or you can go</font><font color="#E5E5E5"> to my</font>

156
00:08:58,370 --> 00:09:03,610
<font color="#E5E5E5">channels home page and see what</font><font color="#CCCCCC"> I'm</font>

157
00:09:00,170 --> 00:09:03,610
<font color="#CCCCCC">offering today bye bye</font>

