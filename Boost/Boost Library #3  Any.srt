1
00:00:00,140 --> 00:00:08,940
hello everyone today<font color="#CCCCCC"> we will talk about</font>

2
00:00:02,700 --> 00:00:11,428
<font color="#CCCCCC">the class in boost</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> ne</font><font color="#E5E5E5"> ne is the</font>

3
00:00:08,940 --> 00:00:14,849
type of<font color="#E5E5E5"> data that can</font><font color="#CCCCCC"> be used to</font><font color="#E5E5E5"> store</font>

4
00:00:11,429 --> 00:00:22,650
any type<font color="#CCCCCC"> of data so in the main function</font>

5
00:00:14,849 --> 00:00:28,800
if I create boost<font color="#E5E5E5"> any X Y Z and X equal</font>

6
00:00:22,650 --> 00:00:32,759
<font color="#CCCCCC">to</font><font color="#E5E5E5"> string hello then X is storing a</font>

7
00:00:28,800 --> 00:00:37,649
stream then X<font color="#CCCCCC"> equal to 2 point 3</font><font color="#E5E5E5"> and</font>

8
00:00:32,759 --> 00:00:44,719
<font color="#E5E5E5">suddenly X becomes a double y equal to a</font>

9
00:00:37,649 --> 00:00:52,140
Z and Y is starting a char<font color="#E5E5E5"> Z equal</font><font color="#CCCCCC"> to</font>

10
00:00:44,719 --> 00:00:55,860
vector<font color="#E5E5E5"> int and Z is storing a vector so</font>

11
00:00:52,140 --> 00:00:59,190
<font color="#CCCCCC">ne is kind</font><font color="#E5E5E5"> of similar to variant in</font>

12
00:00:55,860 --> 00:01:01,739
terms of the purpose but<font color="#E5E5E5"> ne is more</font>

13
00:00:59,190 --> 00:01:04,979
flexible<font color="#E5E5E5"> it can</font><font color="#CCCCCC"> be used to store any</font>

14
00:01:01,739 --> 00:01:07,979
<font color="#E5E5E5">kind of data and variant can only be</font>

15
00:01:04,979 --> 00:01:13,289
used to<font color="#E5E5E5"> store</font><font color="#CCCCCC"> a limited</font><font color="#E5E5E5"> number of types</font>

16
00:01:07,979 --> 00:01:19,740
of data but the flexibility<font color="#E5E5E5"> is not free</font>

17
00:01:13,290 --> 00:01:24,150
<font color="#E5E5E5">any uses</font><font color="#CCCCCC"> dynamic storage</font><font color="#E5E5E5"> and variant</font>

18
00:01:19,740 --> 00:01:25,949
uses stack<font color="#E5E5E5"> based storage so variant is</font>

19
00:01:24,150 --> 00:01:30,270
more efficient in<font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> memory</font>

20
00:01:25,950 --> 00:01:37,890
<font color="#E5E5E5">management now I want</font><font color="#CCCCCC"> to print the value</font>

21
00:01:30,270 --> 00:01:40,470
<font color="#CCCCCC">of y Z out</font><font color="#E5E5E5"> Y and line this will not</font>

22
00:01:37,890 --> 00:01:44,970
compile because<font color="#E5E5E5"> the left shift operator</font>

23
00:01:40,470 --> 00:01:49,789
is not overloaded<font color="#CCCCCC"> for any in order to</font>

24
00:01:44,970 --> 00:01:52,090
print wise value<font color="#CCCCCC"> I have to do</font><font color="#E5E5E5"> boost any</font>

25
00:01:49,790 --> 00:01:59,810
cost

26
00:01:52,090 --> 00:02:09,470
<font color="#CCCCCC">ciao</font><font color="#E5E5E5"> why the function any cost</font><font color="#CCCCCC"> will</font>

27
00:01:59,810 --> 00:02:12,019
<font color="#E5E5E5">return a copy of wise data which is Z so</font>

28
00:02:09,470 --> 00:02:14,870
the any cost function is<font color="#CCCCCC"> similar to the</font>

29
00:02:12,019 --> 00:02:17,870
gate function for<font color="#E5E5E5"> valiant the</font><font color="#CCCCCC"> difference</font>

30
00:02:14,870 --> 00:02:20,870
is<font color="#E5E5E5"> any construction returns a copy of</font>

31
00:02:17,870 --> 00:02:25,940
the data and<font color="#CCCCCC"> the CAD function returns a</font>

32
00:02:20,870 --> 00:02:32,170
reference<font color="#E5E5E5"> of the data and I can also</font>

33
00:02:25,940 --> 00:02:37,370
print the excess<font color="#CCCCCC"> value and X is a double</font>

34
00:02:32,170 --> 00:02:45,768
X and the tail returns<font color="#CCCCCC"> X's theta which</font>

35
00:02:37,370 --> 00:02:51,500
is<font color="#CCCCCC"> 2.3</font><font color="#E5E5E5"> and if I want to print x value by</font>

36
00:02:45,769 --> 00:02:57,590
the I specify X as int<font color="#E5E5E5"> and this will not</font>

37
00:02:51,500 --> 00:03:08,380
<font color="#CCCCCC">work</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> slow an exception of bad</font>

38
00:02:57,590 --> 00:03:11,989
any cost<font color="#CCCCCC"> and if I any cost X into float</font>

39
00:03:08,380 --> 00:03:15,910
this will still flow the<font color="#CCCCCC"> bed any cost</font>

40
00:03:11,989 --> 00:03:22,870
so the type has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be matched exactly</font>

41
00:03:15,910 --> 00:03:26,130
<font color="#E5E5E5">now I want to use Z boost any</font><font color="#CCCCCC"> cost</font>

42
00:03:22,870 --> 00:03:35,750
vector<font color="#CCCCCC"> eat</font>

43
00:03:26,130 --> 00:03:48,300
<font color="#E5E5E5">z</font><font color="#CCCCCC"> pushback 23 and then</font><font color="#E5E5E5"> I do int I equals</font>

44
00:03:35,750 --> 00:03:54,360
mu Steny<font color="#CCCCCC"> cast vector</font><font color="#E5E5E5"> int Z dot top not</font>

45
00:03:48,300 --> 00:03:59,100
top back now guess what will happen<font color="#E5E5E5"> this</font>

46
00:03:54,360 --> 00:04:02,700
<font color="#CCCCCC">will crash</font><font color="#E5E5E5"> because the any cost function</font>

47
00:03:59,100 --> 00:04:06,780
returns a copy of the vector<font color="#E5E5E5"> stored in Z</font>

48
00:04:02,700 --> 00:04:11,609
so<font color="#CCCCCC"> when I push back</font><font color="#E5E5E5"> 23 I'm pushing back</font>

49
00:04:06,780 --> 00:04:14,550
23 into a copy of the vector so the

50
00:04:11,610 --> 00:04:19,320
vector in Z was still empty<font color="#CCCCCC"> when I call</font>

51
00:04:14,550 --> 00:04:22,650
the back function<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> also be</font>

52
00:04:19,320 --> 00:04:28,740
used to<font color="#E5E5E5"> store</font><font color="#CCCCCC"> a pointer</font><font color="#E5E5E5"> so say I</font><font color="#CCCCCC"> have an</font>

53
00:04:22,650 --> 00:04:33,060
integer I and boost<font color="#CCCCCC"> any</font><font color="#E5E5E5"> P equal to the</font>

54
00:04:28,740 --> 00:04:37,080
edges of I and then later on I<font color="#CCCCCC"> can do</font>

55
00:04:33,060 --> 00:04:44,630
integer pointer P int<font color="#E5E5E5"> equal to a boost</font>

56
00:04:37,080 --> 00:04:44,630
<font color="#E5E5E5">all cast integer pointer key</font>

57
00:04:44,960 --> 00:04:58,820
so this time<font color="#CCCCCC"> anycast</font><font color="#E5E5E5"> returns a pointer</font>

58
00:04:49,150 --> 00:05:05,120
<font color="#E5E5E5">and if I create a vector of any called M</font>

59
00:04:58,820 --> 00:05:11,270
<font color="#E5E5E5">I can do m dot push back to an integer m</font>

60
00:05:05,120 --> 00:05:16,340
dot<font color="#E5E5E5"> push back a a character m dot push</font>

61
00:05:11,270 --> 00:05:22,460
back<font color="#CCCCCC"> P which is another any of integer</font>

62
00:05:16,340 --> 00:05:29,750
pointer m dot push back boost<font color="#E5E5E5"> any this</font>

63
00:05:22,460 --> 00:05:35,270
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> empty any as a</font><font color="#CCCCCC"> placeholder and I</font>

64
00:05:29,750 --> 00:05:42,070
can also create a struct property which

65
00:05:35,270 --> 00:05:47,630
contains a string called name and an any

66
00:05:42,070 --> 00:05:49,849
<font color="#CCCCCC">called value so this is a name value</font>

67
00:05:47,630 --> 00:05:54,880
pair where the<font color="#E5E5E5"> value can</font><font color="#CCCCCC"> be actually</font>

68
00:05:49,849 --> 00:06:01,190
<font color="#CCCCCC">data</font><font color="#E5E5E5"> type and if I create a vector of</font>

69
00:05:54,880 --> 00:06:04,310
property<font color="#E5E5E5"> called properties then I can</font>

70
00:06:01,190 --> 00:06:06,530
<font color="#CCCCCC">use this</font><font color="#E5E5E5"> variable to store any number of</font>

71
00:06:04,310 --> 00:06:09,740
properties where<font color="#CCCCCC"> the value can be</font>

72
00:06:06,530 --> 00:06:13,388
arbitrary data type so this is a very

73
00:06:09,740 --> 00:06:13,389
<font color="#CCCCCC">powerful data structure</font>

74
00:06:13,710 --> 00:06:20,080
we have mentioned<font color="#CCCCCC"> in previous</font><font color="#E5E5E5"> video that</font>

75
00:06:16,510 --> 00:06:25,020
<font color="#E5E5E5">a variant can never be empty</font><font color="#CCCCCC"> but a nanny</font>

76
00:06:20,080 --> 00:06:36,130
<font color="#CCCCCC">can be empty</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can check if X is</font>

77
00:06:25,020 --> 00:06:39,400
empty then we<font color="#E5E5E5"> print out X is empty one</font>

78
00:06:36,130 --> 00:06:41,130
<font color="#E5E5E5">problem with any is the data type can</font>

79
00:06:39,400 --> 00:06:44,950
only check at run time

80
00:06:41,130 --> 00:06:48,330
unlike variant where you can use visitor

81
00:06:44,950 --> 00:06:51,039
to check the data<font color="#CCCCCC"> type at compile time</font>

82
00:06:48,330 --> 00:06:54,190
<font color="#E5E5E5">so if I want to check the type of the</font>

83
00:06:51,040 --> 00:07:02,100
<font color="#E5E5E5">data stored in any I have to use</font><font color="#CCCCCC"> run</font>

84
00:06:54,190 --> 00:07:15,780
<font color="#CCCCCC">time type</font><font color="#E5E5E5"> identification type equal to</font>

85
00:07:02,100 --> 00:07:15,780
type ID<font color="#E5E5E5"> char then print out X is a charm</font>

86
00:07:17,319 --> 00:07:21,610
that's all for today<font color="#CCCCCC"> feel free to check</font>

87
00:07:19,330 --> 00:07:23,998
out<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other videos I have and see you</font>

88
00:07:21,610 --> 00:07:23,999
next<font color="#CCCCCC"> time</font>

