1
00:00:00,079 --> 00:00:07,560
hello everyone today<font color="#CCCCCC"> we will talk about</font>

2
00:00:02,610 --> 00:00:12,750
<font color="#CCCCCC">another boost class</font><font color="#E5E5E5"> variant</font><font color="#CCCCCC"> as we know</font>

3
00:00:07,560 --> 00:00:21,029
in<font color="#E5E5E5"> C as well as C++</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> Union so if</font>

4
00:00:12,750 --> 00:00:24,000
I create<font color="#E5E5E5"> a union into I float F you then</font>

5
00:00:21,029 --> 00:00:27,480
the same<font color="#E5E5E5"> storage space of you can be</font>

6
00:00:24,000 --> 00:00:31,529
used to either store an integer or a

7
00:00:27,480 --> 00:00:35,969
float<font color="#E5E5E5"> but not both at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same time so</font>

8
00:00:31,529 --> 00:00:40,500
if I do you<font color="#CCCCCC"> I equal to 34</font><font color="#E5E5E5"> and then you</font>

9
00:00:35,969 --> 00:00:46,860
dot F equal to<font color="#CCCCCC"> two</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> three then you</font>

10
00:00:40,500 --> 00:00:50,309
dot I at<font color="#E5E5E5"> this point is over written so</font>

11
00:00:46,860 --> 00:00:53,039
this<font color="#CCCCCC"> is how Union works</font><font color="#E5E5E5"> but the problem</font>

12
00:00:50,309 --> 00:00:58,680
<font color="#E5E5E5">with</font><font color="#CCCCCC"> Union is it has to work</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> plain</font>

13
00:00:53,039 --> 00:01:03,710
old data<font color="#E5E5E5"> if I create a union of integer</font>

14
00:00:58,680 --> 00:01:07,289
and a stream then this will<font color="#CCCCCC"> not compile</font>

15
00:01:03,710 --> 00:01:11,340
this<font color="#E5E5E5"> makes Union</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> mostly useless once</font>

16
00:01:07,290 --> 00:01:15,630
we enter C++ because<font color="#CCCCCC"> in C++</font><font color="#E5E5E5"> we almost</font>

17
00:01:11,340 --> 00:01:20,150
always deal with classes this<font color="#CCCCCC"> is why</font>

18
00:01:15,630 --> 00:01:24,679
boost library provide<font color="#CCCCCC"> variant library</font><font color="#E5E5E5"> a</font>

19
00:01:20,150 --> 00:01:27,869
variant is like a union<font color="#E5E5E5"> for signals</font><font color="#CCCCCC"> pass</font>

20
00:01:24,680 --> 00:01:33,829
<font color="#E5E5E5">after I included</font><font color="#CCCCCC"> the variant header</font><font color="#E5E5E5"> I</font>

21
00:01:27,869 --> 00:01:41,250
can start user variant boost<font color="#E5E5E5"> variant</font><font color="#CCCCCC"> int</font>

22
00:01:33,829 --> 00:01:43,500
<font color="#E5E5E5">stream</font><font color="#CCCCCC"> u 1</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> u 2 so u 1 u 2 can be</font>

23
00:01:41,250 --> 00:01:46,579
used to store either an integer or a

24
00:01:43,500 --> 00:01:53,930
string but not both at the fun time you

25
00:01:46,579 --> 00:01:59,960
<font color="#CCCCCC">want</font><font color="#E5E5E5"> equal to 2 u 2 equal equal to</font>

26
00:01:53,930 --> 00:02:04,940
hello so<font color="#E5E5E5"> u1</font><font color="#CCCCCC"> is starting an integer and</font>

27
00:01:59,960 --> 00:02:07,940
the u2 is starting a stream and if I

28
00:02:04,940 --> 00:02:23,930
want to print out to u1 u2<font color="#E5E5E5"> I can simply</font>

29
00:02:07,940 --> 00:02:28,850
do u 1 u 2 and<font color="#CCCCCC"> if I run the program it</font>

30
00:02:23,930 --> 00:02:33,370
prints out<font color="#CCCCCC"> to and hello now I want to</font>

31
00:02:28,850 --> 00:02:36,200
change<font color="#E5E5E5"> u 1 equal to u 1 times of two</font>

32
00:02:33,370 --> 00:02:39,050
this will not compile<font color="#E5E5E5"> because the</font>

33
00:02:36,200 --> 00:02:46,329
operator<font color="#E5E5E5"> star is not overloaded for</font>

34
00:02:39,050 --> 00:02:46,330
variant so instead we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do this</font>

35
00:02:46,540 --> 00:02:57,200
get int u 1 and then<font color="#E5E5E5"> times of 2 so the</font>

36
00:02:54,170 --> 00:03:00,890
<font color="#E5E5E5">gate function will get</font><font color="#CCCCCC"> an integer</font><font color="#E5E5E5"> out of</font>

37
00:02:57,200 --> 00:03:04,250
you one but you need to be<font color="#CCCCCC"> careful not</font>

38
00:03:00,890 --> 00:03:07,420
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make a</font><font color="#CCCCCC"> mistake with this</font><font color="#E5E5E5"> type say I</font>

39
00:03:04,250 --> 00:03:16,430
want to create<font color="#CCCCCC"> a string as T equal to</font>

40
00:03:07,420 --> 00:03:23,929
boost get<font color="#E5E5E5"> string u 1 this will slow</font>

41
00:03:16,430 --> 00:03:27,500
exception of bad cat because<font color="#E5E5E5"> what's</font>

42
00:03:23,930 --> 00:03:31,730
stored in u 1 is<font color="#E5E5E5"> really an integer</font><font color="#CCCCCC"> not a</font>

43
00:03:27,500 --> 00:03:33,830
<font color="#E5E5E5">string but later</font><font color="#CCCCCC"> on I can</font><font color="#E5E5E5"> change the</font>

44
00:03:31,730 --> 00:03:42,220
data in your<font color="#CCCCCC"> 1 to a different the type</font>

45
00:03:33,830 --> 00:03:48,260
<font color="#CCCCCC">you want equal</font><font color="#E5E5E5"> to good and now you want</font>

46
00:03:42,220 --> 00:03:57,530
<font color="#E5E5E5">becomes a</font><font color="#CCCCCC"> stream and I do you</font><font color="#E5E5E5"> one equal</font>

47
00:03:48,260 --> 00:04:00,560
to 32<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you one becomes a</font><font color="#E5E5E5"> int again so</font>

48
00:03:57,530 --> 00:04:05,269
at<font color="#E5E5E5"> different point of</font><font color="#CCCCCC"> time you one can</font>

49
00:04:00,560 --> 00:04:08,690
contain different<font color="#CCCCCC"> type of data a variant</font>

50
00:04:05,269 --> 00:04:14,269
can never be empty<font color="#E5E5E5"> so if we create a</font>

51
00:04:08,690 --> 00:04:17,029
variant of<font color="#CCCCCC"> you three and then you three</font>

52
00:04:14,269 --> 00:04:21,108
will be constructed with<font color="#CCCCCC"> the first type</font>

53
00:04:17,029 --> 00:04:27,380
in the<font color="#CCCCCC"> type list which is</font><font color="#E5E5E5"> the integer so</font>

54
00:04:21,108 --> 00:04:31,460
if we print out<font color="#E5E5E5"> you three and we need to</font>

55
00:04:27,380 --> 00:04:40,820
comment<font color="#E5E5E5"> out this bad</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> and run the</font>

56
00:04:31,460 --> 00:04:43,159
program<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> three contains</font><font color="#E5E5E5"> zero so</font>

57
00:04:40,820 --> 00:04:47,060
far we have been<font color="#E5E5E5"> using gate function to</font>

58
00:04:43,160 --> 00:04:49,580
fetch the data<font color="#CCCCCC"> stored in a variant the</font>

59
00:04:47,060 --> 00:04:52,580
problem with gate function is we have to

60
00:04:49,580 --> 00:04:55,250
<font color="#E5E5E5">know the data type of the data stored in</font>

61
00:04:52,580 --> 00:04:59,090
the valiant<font color="#E5E5E5"> and sometimes we don't know</font>

62
00:04:55,250 --> 00:05:04,180
<font color="#CCCCCC">that</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example we have a function or</font>

63
00:04:59,090 --> 00:05:09,500
the double which takes a boost variant

64
00:05:04,180 --> 00:05:13,280
<font color="#E5E5E5">int string B</font>

65
00:05:09,500 --> 00:05:16,970
then how do I know what data the V is

66
00:05:13,280 --> 00:05:19,719
storing we don't know it depends on the

67
00:05:16,970 --> 00:05:22,820
person who is<font color="#CCCCCC"> calling this function so</font>

68
00:05:19,720 --> 00:05:27,290
<font color="#CCCCCC">we need a better</font><font color="#E5E5E5"> way to fetch the data</font>

69
00:05:22,820 --> 00:05:36,640
stored in a variant<font color="#CCCCCC"> and we do have a</font>

70
00:05:27,290 --> 00:05:36,640
better way<font color="#E5E5E5"> to do that we can use visitor</font>

71
00:05:37,889 --> 00:05:43,590
here I<font color="#CCCCCC"> create</font><font color="#E5E5E5"> a class double visitor</font>

72
00:05:40,740 --> 00:05:47,569
<font color="#CCCCCC">which is a functor</font><font color="#E5E5E5"> and it is derived</font>

73
00:05:43,590 --> 00:05:50,340
from the<font color="#CCCCCC"> static visitor class in boost</font>

74
00:05:47,569 --> 00:05:54,360
this<font color="#E5E5E5"> functor can take two kinds of</font>

75
00:05:50,340 --> 00:05:56,549
<font color="#CCCCCC">parameters</font><font color="#E5E5E5"> integer or string and it will</font>

76
00:05:54,360 --> 00:06:00,539
do different things<font color="#E5E5E5"> based on the type of</font>

77
00:05:56,550 --> 00:06:04,229
the<font color="#E5E5E5"> parameter and then we can use the</font>

78
00:06:00,539 --> 00:06:09,949
visitor<font color="#E5E5E5"> to operate on the variant u1</font>

79
00:06:04,229 --> 00:06:21,900
equal to<font color="#CCCCCC"> two it's an integer</font><font color="#E5E5E5"> boost apply</font>

80
00:06:09,949 --> 00:06:29,039
visitor double visitor<font color="#CCCCCC"> u1 as a lose out</font>

81
00:06:21,900 --> 00:06:34,770
<font color="#CCCCCC">u 1 becomes 4 and if we do u2 equal to</font>

82
00:06:29,039 --> 00:06:41,779
hello<font color="#E5E5E5"> and we do the same</font><font color="#CCCCCC"> thing boost</font><font color="#E5E5E5"> a</font>

83
00:06:34,770 --> 00:06:48,270
private<font color="#E5E5E5"> double visitor u 2 & u 2 becomes</font>

84
00:06:41,779 --> 00:06:52,879
hello<font color="#E5E5E5"> hello so in a sense the visitor is</font>

85
00:06:48,270 --> 00:06:52,878
like<font color="#E5E5E5"> polymorphism on Valiant</font>

86
00:06:53,060 --> 00:07:01,949
so as you see<font color="#E5E5E5"> using a visitor is both</font>

87
00:06:56,639 --> 00:07:09,659
flexible<font color="#CCCCCC"> and safe and now i can do even</font>

88
00:07:01,949 --> 00:07:12,820
<font color="#CCCCCC">more</font><font color="#E5E5E5"> powerful things</font><font color="#CCCCCC"> i create a vector</font>

89
00:07:09,659 --> 00:07:19,070
of variant

90
00:07:12,820 --> 00:07:25,670
in<font color="#CCCCCC"> swing back and we can do back</font><font color="#E5E5E5"> but</font>

91
00:07:19,070 --> 00:07:31,520
push back good<font color="#E5E5E5"> this is a string and back</font>

92
00:07:25,670 --> 00:07:38,330
up push back<font color="#CCCCCC"> 23 by integer back now push</font>

93
00:07:31,520 --> 00:07:45,440
back bad another stream and later<font color="#CCCCCC"> all</font><font color="#E5E5E5"> I</font>

94
00:07:38,330 --> 00:07:59,260
<font color="#E5E5E5">can create a double visitor F and then</font>

95
00:07:45,440 --> 00:07:59,260
for<font color="#CCCCCC"> Auto ex back boost apply</font><font color="#E5E5E5"> visitor F X</font>

96
00:08:00,220 --> 00:08:06,590
<font color="#CCCCCC">so this will</font><font color="#E5E5E5"> apply the double visitor on</font>

97
00:08:03,230 --> 00:08:08,690
<font color="#E5E5E5">each valiant in</font><font color="#CCCCCC"> the vector</font><font color="#E5E5E5"> and do</font>

98
00:08:06,590 --> 00:08:13,070
<font color="#E5E5E5">different things based on the data type</font>

99
00:08:08,690 --> 00:08:14,810
<font color="#E5E5E5">of the valiant that's all for today feel</font>

100
00:08:13,070 --> 00:08:18,310
free to check out<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> videos I</font>

101
00:08:14,810 --> 00:08:18,310
<font color="#CCCCCC">have and see you</font><font color="#E5E5E5"> next time</font>

